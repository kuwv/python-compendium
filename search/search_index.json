{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Compendium This website provides the project documentation for Python Compendium. Overview Compendium is a configuration management tool Features Hierarchical configuration: Nested configuration: JSON support: INI support: TOML support: XML support: YAML support: Extensible: Install pip install compendium","title":"Welcome to Compendium"},{"location":"#welcome-to-compendium","text":"This website provides the project documentation for Python Compendium.","title":"Welcome to Compendium"},{"location":"#overview","text":"Compendium is a configuration management tool","title":"Overview"},{"location":"#features","text":"Hierarchical configuration: Nested configuration: JSON support: INI support: TOML support: XML support: YAML support: Extensible:","title":"Features"},{"location":"#install","text":"pip install compendium","title":"Install"},{"location":"development/config_manager/","text":"Provide configuration manager for multiple settings. ConfigManager Manage multiple disperate settings groups. __init__ ( self , * args , ** kwargs ) special Inialize configuration manager. Source code in compendium/config_manager.py 18 19 20 21 def __init__ ( self , * args , ** kwargs ): '''Inialize configuration manager.''' for config in kwargs . get ( 'configs' ): self . add_config ( config ) add_config ( self , config ) Add configuration cache to manage. Source code in compendium/config_manager.py 23 24 25 26 def add_config ( self , config : dict ): '''Add configuration cache to manage.''' self . configs . append ({ config [ 'application' ]: Settings ( ** config )}) self . configs [ config [ 'application' ]] . load ()","title":"Config manager"},{"location":"development/config_manager/#compendium.config_manager","text":"Provide configuration manager for multiple settings.","title":"compendium.config_manager"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager","text":"Manage multiple disperate settings groups.","title":"ConfigManager"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.__init__","text":"Inialize configuration manager. Source code in compendium/config_manager.py 18 19 20 21 def __init__ ( self , * args , ** kwargs ): '''Inialize configuration manager.''' for config in kwargs . get ( 'configs' ): self . add_config ( config )","title":"__init__()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.add_config","text":"Add configuration cache to manage. Source code in compendium/config_manager.py 23 24 25 26 def add_config ( self , config : dict ): '''Add configuration cache to manage.''' self . configs . append ({ config [ 'application' ]: Settings ( ** config )}) self . configs [ config [ 'application' ]] . load ()","title":"add_config()"},{"location":"development/settings/","text":"Provide settings modules. HierarchySettingsCache Manage settings from hierarchy configurations. __init__ ( self , application , ** kwargs ) special Initialize settings from hirarchy filepaths. list, optional Include sections to be merged list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded Source code in compendium/settings.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 def __init__ ( self , application , ** kwargs ): '''Initialize settings from hirarchy filepaths. merge_sections: list, optional Include sections to be merged merge_strategy: list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded ''' super () . __init__ ( application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : List [ str ] = kwargs . get ( 'merge_sections' , []) load ( self , path = None , filename = None ) Load settings from hierarchy filepaths. Source code in compendium/settings.py 193 194 195 196 197 198 199 def load ( self , path : Optional [ str ] = None , filename : Optional [ str ] = None ): '''Load settings from hierarchy filepaths.''' self . load_configs () settings = {} for filepath in self . filepaths : dpath . merge ( settings , self . load_config ( filepath ), flags = 2 ) self . _initialize_settings ( settings ) NestedSettingsCache Manage settings from nested configurations. __init__ ( self , application , ** kwargs ) special Initialize nested settings management. Source code in compendium/settings.py 156 157 158 159 160 def __init__ ( self , application , ** kwargs ): '''Initialize nested settings management.''' super () . __init__ ( application , ** kwargs ) self . load_strategy = 'nested' load ( self , path = None , filename = None ) Load settings from nested configuration. Source code in compendium/settings.py 162 163 164 165 166 167 168 169 170 def load ( self , path : Optional [ str ] = None , filename : Optional [ str ] = None ): '''Load settings from nested configuration.''' self . load_configs () settings = [] for filepath in self . filepaths : settings . append ( { 'filepath' : filepath , ** self . load_config ( filepath )} ) self . _initialize_settings ({ 'settings' : settings }) Settings Manage settings loaded from confiugrations. defaults: Dict [ Any , Any ] property readonly Return default settings. settings: Dict [ Any , Any ] property readonly Return settings. __init__ ( self , application , ** kwargs ) special Initialize settings store. Source code in compendium/settings.py 21 22 23 24 25 26 27 28 29 30 def __init__ ( self , application : str , ** kwargs ): '''Initialize settings store.''' self . __settings : Dict [ Any , Any ] = {} if 'defaults' in kwargs and self . __defaults == {}: self . __defaults = kwargs . get ( 'defaults' ) # Load settings from configs self . separator : str = kwargs . get ( 'separator' , '/' ) self . prefix = kwargs . get ( 'prefix' , application . upper () + '_' ) add ( self , keypath , value ) Add key/value pair located at keypath. Source code in compendium/settings.py 103 104 105 def add ( self , keypath : str , value : Any ) -> None : '''Add key/value pair located at keypath.''' dpath . new ( self . __settings , keypath , value , self . separator ) append ( self , keypath , value ) Append to a list located at keypath. Source code in compendium/settings.py 89 90 91 92 93 94 95 96 def append ( self , keypath : str , value : Any ) -> None : '''Append to a list located at keypath.''' store = [ value ] keypath_dir = keypath . split ( self . separator )[ 1 :] for x in reversed ( keypath_dir ): store = { x : store } dpath . merge ( self . __settings , store ) self . save ( self . head ) create ( self , keypath , value ) Create new key/value pair located at path. Source code in compendium/settings.py 107 108 109 110 def create ( self , keypath : str , value : Any ) -> None : '''Create new key/value pair located at path.''' dpath . new ( self . __settings , keypath , value , self . separator ) self . save ( self . head ) delete ( self , keypath ) Delete key/value located at keypath. Source code in compendium/settings.py 112 113 114 115 def delete ( self , keypath : str ) -> None : '''Delete key/value located at keypath.''' dpath . delete ( self . __settings , keypath , self . separator ) self . save ( self . head ) get ( self , query , document = None , default = None ) Get value from settings with key. Source code in compendium/settings.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def get ( self , query : str , document : Optional [ Dict [ Any , Any ]] = None , default : Optional [ Any ] = None , ): '''Get value from settings with key.''' if not document : document = self . __settings documents = [ self . __environs , document , self . __defaults ] for doc in documents : try : return dpath . get ( doc , query , self . separator ) break except KeyError : pass return default load_environment ( self ) Load environment variables. Source code in compendium/settings.py 42 43 44 45 46 47 48 49 50 51 def load_environment ( self ) -> None : '''Load environment variables.''' # TODO: Change env key from '_' to dict path env = [ { k . replace ( self . prefix , '' ) . lower (): v } for k , v in os . environ . items () if k . startswith ( self . prefix ) ] if env != []: self . __environs = { 'env' : env } search ( self , query ) Search settings matching query. Source code in compendium/settings.py 85 86 87 def search ( self , query : str ) -> Dict [ Any , Any ]: '''Search settings matching query.''' return dpath . values ( self . __settings , query , self . separator ) update ( self , keypath , value ) Update value located at keypath. Source code in compendium/settings.py 98 99 100 101 def update ( self , keypath : str , value : Any ) -> None : '''Update value located at keypath.''' dpath . set ( self . __settings , keypath , value , self . separator ) self . save ( self . head ) view ( self ) View current keypath location. Source code in compendium/settings.py 117 118 119 def view ( self ) -> str : '''View current keypath location.''' return self . keypath SettingsCache Manage settings from cache. __init__ ( self , application , ** kwargs ) special Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last Source code in compendium/settings.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def __init__ ( self , application , ** kwargs ): '''Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last ''' Settings . __init__ ( self , application , ** kwargs ) ConfigPaths . __init__ ( self , application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : List [ str ] = kwargs . get ( 'merge_sections' , []) self . writable : Optional [ bool ] = kwargs . get ( 'writable' , False ) load ( self , filename = None , path = None ) Load settings from configuration file. Source code in compendium/settings.py 142 143 144 145 146 def load ( self , filename : Optional [ str ] = None , path : Optional [ str ] = None ) -> None : '''Load settings from configuration file.''' self . _initialize_settings ( self . load_config ( self . head )) save ( self , path ) Save settings to configuraiton. Source code in compendium/settings.py 148 149 150 def save ( self , path : str ) -> None : '''Save settings to configuraiton.''' self . save_config ( self . head , self . settings )","title":"Settings"},{"location":"development/settings/#compendium.settings","text":"Provide settings modules.","title":"compendium.settings"},{"location":"development/settings/#compendium.settings.HierarchySettingsCache","text":"Manage settings from hierarchy configurations.","title":"HierarchySettingsCache"},{"location":"development/settings/#compendium.settings.HierarchySettingsCache.__init__","text":"Initialize settings from hirarchy filepaths. list, optional Include sections to be merged list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded Source code in compendium/settings.py 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 def __init__ ( self , application , ** kwargs ): '''Initialize settings from hirarchy filepaths. merge_sections: list, optional Include sections to be merged merge_strategy: list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded ''' super () . __init__ ( application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : List [ str ] = kwargs . get ( 'merge_sections' , [])","title":"__init__()"},{"location":"development/settings/#compendium.settings.HierarchySettingsCache.load","text":"Load settings from hierarchy filepaths. Source code in compendium/settings.py 193 194 195 196 197 198 199 def load ( self , path : Optional [ str ] = None , filename : Optional [ str ] = None ): '''Load settings from hierarchy filepaths.''' self . load_configs () settings = {} for filepath in self . filepaths : dpath . merge ( settings , self . load_config ( filepath ), flags = 2 ) self . _initialize_settings ( settings )","title":"load()"},{"location":"development/settings/#compendium.settings.NestedSettingsCache","text":"Manage settings from nested configurations.","title":"NestedSettingsCache"},{"location":"development/settings/#compendium.settings.NestedSettingsCache.__init__","text":"Initialize nested settings management. Source code in compendium/settings.py 156 157 158 159 160 def __init__ ( self , application , ** kwargs ): '''Initialize nested settings management.''' super () . __init__ ( application , ** kwargs ) self . load_strategy = 'nested'","title":"__init__()"},{"location":"development/settings/#compendium.settings.NestedSettingsCache.load","text":"Load settings from nested configuration. Source code in compendium/settings.py 162 163 164 165 166 167 168 169 170 def load ( self , path : Optional [ str ] = None , filename : Optional [ str ] = None ): '''Load settings from nested configuration.''' self . load_configs () settings = [] for filepath in self . filepaths : settings . append ( { 'filepath' : filepath , ** self . load_config ( filepath )} ) self . _initialize_settings ({ 'settings' : settings })","title":"load()"},{"location":"development/settings/#compendium.settings.Settings","text":"Manage settings loaded from confiugrations.","title":"Settings"},{"location":"development/settings/#compendium.settings.Settings.defaults","text":"Return default settings.","title":"defaults"},{"location":"development/settings/#compendium.settings.Settings.settings","text":"Return settings.","title":"settings"},{"location":"development/settings/#compendium.settings.Settings.__init__","text":"Initialize settings store. Source code in compendium/settings.py 21 22 23 24 25 26 27 28 29 30 def __init__ ( self , application : str , ** kwargs ): '''Initialize settings store.''' self . __settings : Dict [ Any , Any ] = {} if 'defaults' in kwargs and self . __defaults == {}: self . __defaults = kwargs . get ( 'defaults' ) # Load settings from configs self . separator : str = kwargs . get ( 'separator' , '/' ) self . prefix = kwargs . get ( 'prefix' , application . upper () + '_' )","title":"__init__()"},{"location":"development/settings/#compendium.settings.Settings.add","text":"Add key/value pair located at keypath. Source code in compendium/settings.py 103 104 105 def add ( self , keypath : str , value : Any ) -> None : '''Add key/value pair located at keypath.''' dpath . new ( self . __settings , keypath , value , self . separator )","title":"add()"},{"location":"development/settings/#compendium.settings.Settings.append","text":"Append to a list located at keypath. Source code in compendium/settings.py 89 90 91 92 93 94 95 96 def append ( self , keypath : str , value : Any ) -> None : '''Append to a list located at keypath.''' store = [ value ] keypath_dir = keypath . split ( self . separator )[ 1 :] for x in reversed ( keypath_dir ): store = { x : store } dpath . merge ( self . __settings , store ) self . save ( self . head )","title":"append()"},{"location":"development/settings/#compendium.settings.Settings.create","text":"Create new key/value pair located at path. Source code in compendium/settings.py 107 108 109 110 def create ( self , keypath : str , value : Any ) -> None : '''Create new key/value pair located at path.''' dpath . new ( self . __settings , keypath , value , self . separator ) self . save ( self . head )","title":"create()"},{"location":"development/settings/#compendium.settings.Settings.delete","text":"Delete key/value located at keypath. Source code in compendium/settings.py 112 113 114 115 def delete ( self , keypath : str ) -> None : '''Delete key/value located at keypath.''' dpath . delete ( self . __settings , keypath , self . separator ) self . save ( self . head )","title":"delete()"},{"location":"development/settings/#compendium.settings.Settings.get","text":"Get value from settings with key. Source code in compendium/settings.py 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 def get ( self , query : str , document : Optional [ Dict [ Any , Any ]] = None , default : Optional [ Any ] = None , ): '''Get value from settings with key.''' if not document : document = self . __settings documents = [ self . __environs , document , self . __defaults ] for doc in documents : try : return dpath . get ( doc , query , self . separator ) break except KeyError : pass return default","title":"get()"},{"location":"development/settings/#compendium.settings.Settings.load_environment","text":"Load environment variables. Source code in compendium/settings.py 42 43 44 45 46 47 48 49 50 51 def load_environment ( self ) -> None : '''Load environment variables.''' # TODO: Change env key from '_' to dict path env = [ { k . replace ( self . prefix , '' ) . lower (): v } for k , v in os . environ . items () if k . startswith ( self . prefix ) ] if env != []: self . __environs = { 'env' : env }","title":"load_environment()"},{"location":"development/settings/#compendium.settings.Settings.search","text":"Search settings matching query. Source code in compendium/settings.py 85 86 87 def search ( self , query : str ) -> Dict [ Any , Any ]: '''Search settings matching query.''' return dpath . values ( self . __settings , query , self . separator )","title":"search()"},{"location":"development/settings/#compendium.settings.Settings.update","text":"Update value located at keypath. Source code in compendium/settings.py 98 99 100 101 def update ( self , keypath : str , value : Any ) -> None : '''Update value located at keypath.''' dpath . set ( self . __settings , keypath , value , self . separator ) self . save ( self . head )","title":"update()"},{"location":"development/settings/#compendium.settings.Settings.view","text":"View current keypath location. Source code in compendium/settings.py 117 118 119 def view ( self ) -> str : '''View current keypath location.''' return self . keypath","title":"view()"},{"location":"development/settings/#compendium.settings.SettingsCache","text":"Manage settings from cache.","title":"SettingsCache"},{"location":"development/settings/#compendium.settings.SettingsCache.__init__","text":"Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last Source code in compendium/settings.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 def __init__ ( self , application , ** kwargs ): '''Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last ''' Settings . __init__ ( self , application , ** kwargs ) ConfigPaths . __init__ ( self , application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : List [ str ] = kwargs . get ( 'merge_sections' , []) self . writable : Optional [ bool ] = kwargs . get ( 'writable' , False )","title":"__init__()"},{"location":"development/settings/#compendium.settings.SettingsCache.load","text":"Load settings from configuration file. Source code in compendium/settings.py 142 143 144 145 146 def load ( self , filename : Optional [ str ] = None , path : Optional [ str ] = None ) -> None : '''Load settings from configuration file.''' self . _initialize_settings ( self . load_config ( self . head ))","title":"load()"},{"location":"development/settings/#compendium.settings.SettingsCache.save","text":"Save settings to configuraiton. Source code in compendium/settings.py 148 149 150 def save ( self , path : str ) -> None : '''Save settings to configuraiton.''' self . save_config ( self . head , self . settings )","title":"save()"}]}