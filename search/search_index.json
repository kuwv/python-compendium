{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Compendium This website provides the project documentation for Python Compendium. Overview Compendium is a configuration management tool Features Configurations Hierarchical configuration Nested configuration Filetypes: JSON support INI support TOML support XML support YAML support Extensible Install pip install compendium","title":"Welcome to Compendium"},{"location":"#welcome-to-compendium","text":"This website provides the project documentation for Python Compendium.","title":"Welcome to Compendium"},{"location":"#overview","text":"Compendium is a configuration management tool","title":"Overview"},{"location":"#features","text":"Configurations Hierarchical configuration Nested configuration Filetypes: JSON support INI support TOML support XML support YAML support Extensible","title":"Features"},{"location":"#install","text":"pip install compendium","title":"Install"},{"location":"configuration/","text":"Configuration Manager should optionaly use repo pattern should save configs as different types Module Cache ConfigManager: test test NestedConfigManager: Maven like nested configurations in HierarchyConfigManager: Hierarchy FileSystem (HFS) in","title":"Configuration Manager"},{"location":"configuration/#configuration-manager","text":"should optionaly use repo pattern should save configs as different types","title":"Configuration Manager"},{"location":"configuration/#module-cache","text":"ConfigManager: test test NestedConfigManager: Maven like nested configurations in HierarchyConfigManager: Hierarchy FileSystem (HFS) in","title":"Module Cache"},{"location":"schema/","text":"","title":"Schema"},{"location":"settings/","text":"Settings Configuration Layers Layers: Environment Variables Configuration Files Default Configurations Environment Variables Environment variables are variables provided by the current shell. Variables provided this way are loaded once on startup and are read-only. These settings are the first queried for entries. Configuration Files Configuration files are the primary storage type for settings. These file can either be user or system configuration files. The last configuration file found is one loaded. This file may optionally read-only or writable. Defaults Defaults are settings loaded from a selected configuration file. This configuration is a read only file. Settings provided by defaults are the last settings searched for entries before an error is thrown. Configuring Settings Manager application - Name of the application instance. path - Path to the configuration files. separator - Character used to separate search paths within search. prefix - Prefix used to pull environment variables from others. Managing Settings from compendium.settings import Settings cfg = Settings(application='app', path='afile.toml') cfg.load() Searching Data Getting settings cfg.get('/servers/**/ip') Search settings query = cfg.search('/servers/**/ip') Adding Settings Create settings cfg.create('/test', 'test') Update settings cfg.update('/owner/name', 'Tom Waits') Remove Settings Delete settings cfg.delete('/owner/name')","title":"Settings"},{"location":"settings/#settings","text":"","title":"Settings"},{"location":"settings/#configuration-layers","text":"Layers: Environment Variables Configuration Files Default Configurations","title":"Configuration Layers"},{"location":"settings/#environment-variables","text":"Environment variables are variables provided by the current shell. Variables provided this way are loaded once on startup and are read-only. These settings are the first queried for entries.","title":"Environment Variables"},{"location":"settings/#configuration-files","text":"Configuration files are the primary storage type for settings. These file can either be user or system configuration files. The last configuration file found is one loaded. This file may optionally read-only or writable.","title":"Configuration Files"},{"location":"settings/#defaults","text":"Defaults are settings loaded from a selected configuration file. This configuration is a read only file. Settings provided by defaults are the last settings searched for entries before an error is thrown.","title":"Defaults"},{"location":"settings/#configuring-settings-manager","text":"application - Name of the application instance. path - Path to the configuration files. separator - Character used to separate search paths within search. prefix - Prefix used to pull environment variables from others.","title":"Configuring Settings Manager"},{"location":"settings/#managing-settings","text":"from compendium.settings import Settings cfg = Settings(application='app', path='afile.toml') cfg.load()","title":"Managing Settings"},{"location":"settings/#searching-data","text":"","title":"Searching Data"},{"location":"settings/#getting-settings","text":"cfg.get('/servers/**/ip')","title":"Getting settings"},{"location":"settings/#search-settings","text":"query = cfg.search('/servers/**/ip')","title":"Search settings"},{"location":"settings/#adding-settings","text":"","title":"Adding Settings"},{"location":"settings/#create-settings","text":"cfg.create('/test', 'test')","title":"Create settings"},{"location":"settings/#update-settings","text":"cfg.update('/owner/name', 'Tom Waits')","title":"Update settings"},{"location":"settings/#remove-settings","text":"","title":"Remove Settings"},{"location":"settings/#delete-settings","text":"cfg.delete('/owner/name')","title":"Delete settings"},{"location":"development/config_base/","text":"Provide plugin base for configuration modules. ConfigBase Define required configuration module methods. load_config ( self , filepath ) Load configuration from file. Source code in compendium/config/config_base.py 15 16 17 @abstractmethod def load_config ( self , filepath ): '''Load configuration from file.''' save_config ( self , content , filepath ) Save confgration to file. Source code in compendium/config/config_base.py 19 20 21 @abstractmethod def save_config ( self , content , filepath ): '''Save confgration to file.'''","title":"Config Base"},{"location":"development/config_base/#compendium.config.config_base","text":"Provide plugin base for configuration modules.","title":"compendium.config.config_base"},{"location":"development/config_base/#compendium.config.config_base.ConfigBase","text":"Define required configuration module methods.","title":"ConfigBase"},{"location":"development/config_base/#compendium.config.config_base.ConfigBase.load_config","text":"Load configuration from file. Source code in compendium/config/config_base.py 15 16 17 @abstractmethod def load_config ( self , filepath ): '''Load configuration from file.'''","title":"load_config()"},{"location":"development/config_base/#compendium.config.config_base.ConfigBase.save_config","text":"Save confgration to file. Source code in compendium/config/config_base.py 19 20 21 @abstractmethod def save_config ( self , content , filepath ): '''Save confgration to file.'''","title":"save_config()"},{"location":"development/config_manager/","text":"Provide settings modules. ConfigManager Manage settings from cache. __init__ ( self , application , ** kwargs ) special Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last Source code in compendium/config_manager.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , application , ** kwargs ): '''Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last ''' Settings . __init__ ( self , application , ** kwargs ) ConfigPaths . __init__ ( self , application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : List [ str ] = kwargs . get ( 'merge_sections' , []) self . writable : Optional [ bool ] = kwargs . get ( 'writable' , False ) load ( self , path = None , filename = None ) Load settings from configuration file. Source code in compendium/config_manager.py 35 36 37 38 39 def load ( self , path : Optional [ str ] = None , filename : Optional [ str ] = None ) -> None : '''Load settings from configuration file.''' self . _initialize_settings ( self . load_config ( self . head )) save ( self , path , filetype = None ) Save settings to configuraiton. Source code in compendium/config_manager.py 41 42 43 def save ( self , path : str , filetype : str = None ) -> None : '''Save settings to configuraiton.''' self . save_config ( self . head , self . settings ) HierarchyConfigManager Manage settings from hierarchy configurations. __init__ ( self , application , ** kwargs ) special Initialize settings from hirarchy filepaths. list, optional Include sections to be merged list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded Source code in compendium/config_manager.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 def __init__ ( self , application , ** kwargs ): '''Initialize settings from hirarchy filepaths. merge_sections: list, optional Include sections to be merged merge_strategy: list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded ''' super () . __init__ ( application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : List [ str ] = kwargs . get ( 'merge_sections' , []) load ( self , path = None , filename = None ) Load settings from hierarchy filepaths. Source code in compendium/config_manager.py 87 88 89 90 91 92 93 def load ( self , path : Optional [ str ] = None , filename : Optional [ str ] = None ): '''Load settings from hierarchy filepaths.''' self . load_configs () settings : Dict [ Any , Any ] = {} for filepath in self . filepaths : dpath . merge ( settings , self . load_config ( filepath ), flags = 2 ) self . _initialize_settings ( settings ) NestedConfigManager Manage settings from nested configurations. __init__ ( self , application , ** kwargs ) special Initialize nested settings management. Source code in compendium/config_manager.py 49 50 51 52 53 def __init__ ( self , application , ** kwargs ): '''Initialize nested settings management.''' super () . __init__ ( application , ** kwargs ) self . load_strategy = 'nested' load ( self , path = None , filename = None ) Load settings from nested configuration. Source code in compendium/config_manager.py 55 56 57 58 59 60 61 62 63 def load ( self , path : Optional [ str ] = None , filename : Optional [ str ] = None ): '''Load settings from nested configuration.''' self . load_configs () settings = [] for filepath in self . filepaths : settings . append ( { 'filepath' : filepath , ** self . load_config ( filepath )} ) self . _initialize_settings ({ 'settings' : settings })","title":"Config Manager"},{"location":"development/config_manager/#compendium.config_manager","text":"Provide settings modules.","title":"compendium.config_manager"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager","text":"Manage settings from cache.","title":"ConfigManager"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.__init__","text":"Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last Source code in compendium/config_manager.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , application , ** kwargs ): '''Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last ''' Settings . __init__ ( self , application , ** kwargs ) ConfigPaths . __init__ ( self , application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : List [ str ] = kwargs . get ( 'merge_sections' , []) self . writable : Optional [ bool ] = kwargs . get ( 'writable' , False )","title":"__init__()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.load","text":"Load settings from configuration file. Source code in compendium/config_manager.py 35 36 37 38 39 def load ( self , path : Optional [ str ] = None , filename : Optional [ str ] = None ) -> None : '''Load settings from configuration file.''' self . _initialize_settings ( self . load_config ( self . head ))","title":"load()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.save","text":"Save settings to configuraiton. Source code in compendium/config_manager.py 41 42 43 def save ( self , path : str , filetype : str = None ) -> None : '''Save settings to configuraiton.''' self . save_config ( self . head , self . settings )","title":"save()"},{"location":"development/config_manager/#compendium.config_manager.HierarchyConfigManager","text":"Manage settings from hierarchy configurations.","title":"HierarchyConfigManager"},{"location":"development/config_manager/#compendium.config_manager.HierarchyConfigManager.__init__","text":"Initialize settings from hirarchy filepaths. list, optional Include sections to be merged list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded Source code in compendium/config_manager.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 def __init__ ( self , application , ** kwargs ): '''Initialize settings from hirarchy filepaths. merge_sections: list, optional Include sections to be merged merge_strategy: list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded ''' super () . __init__ ( application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : List [ str ] = kwargs . get ( 'merge_sections' , [])","title":"__init__()"},{"location":"development/config_manager/#compendium.config_manager.HierarchyConfigManager.load","text":"Load settings from hierarchy filepaths. Source code in compendium/config_manager.py 87 88 89 90 91 92 93 def load ( self , path : Optional [ str ] = None , filename : Optional [ str ] = None ): '''Load settings from hierarchy filepaths.''' self . load_configs () settings : Dict [ Any , Any ] = {} for filepath in self . filepaths : dpath . merge ( settings , self . load_config ( filepath ), flags = 2 ) self . _initialize_settings ( settings )","title":"load()"},{"location":"development/config_manager/#compendium.config_manager.NestedConfigManager","text":"Manage settings from nested configurations.","title":"NestedConfigManager"},{"location":"development/config_manager/#compendium.config_manager.NestedConfigManager.__init__","text":"Initialize nested settings management. Source code in compendium/config_manager.py 49 50 51 52 53 def __init__ ( self , application , ** kwargs ): '''Initialize nested settings management.''' super () . __init__ ( application , ** kwargs ) self . load_strategy = 'nested'","title":"__init__()"},{"location":"development/config_manager/#compendium.config_manager.NestedConfigManager.load","text":"Load settings from nested configuration. Source code in compendium/config_manager.py 55 56 57 58 59 60 61 62 63 def load ( self , path : Optional [ str ] = None , filename : Optional [ str ] = None ): '''Load settings from nested configuration.''' self . load_configs () settings = [] for filepath in self . filepaths : settings . append ( { 'filepath' : filepath , ** self . load_config ( filepath )} ) self . _initialize_settings ({ 'settings' : settings })","title":"load()"},{"location":"development/loader/","text":"Control configuration files. ConfigFile Manage configuration files using dynamic module loader. __init__ ( self , filetype = None , driver_directories = [ 'compendium/config/filetypes' ]) special Initialize module loader. Source code in compendium/config/loader.py 16 17 18 19 20 21 def __init__ ( self , filetype = None , driver_directories = [ 'compendium/config/filetypes' ] ): '''Initialize module loader.''' self . filetype = filetype self . driver_directories = driver_directories get_filename ( filepath ) staticmethod Get the name of the file. Source code in compendium/config/loader.py 69 70 71 72 @staticmethod def get_filename ( filepath : str ): '''Get the name of the file.''' return filepath . rsplit ( '/' , 1 )[ 1 ] get_filetype ( filename ) staticmethod Get filetype from filename. Source code in compendium/config/loader.py 79 80 81 82 @staticmethod def get_filetype ( filename : str ): '''Get filetype from filename.''' return filename . split ( '.' )[ - 1 ] load_config ( self , config_path ) Use discovered module to load configuration. Source code in compendium/config/loader.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def load_config ( self , config_path : str ): '''Use discovered module to load configuration.''' # TODO: Improve error handling if os . path . exists ( config_path ): logging . info ( \"Retrieving configuration: ' {} '\" . format ( config_path )) if not self . filetype : filename = self . get_filename ( config_path ) self . filetype = self . get_filetype ( filename ) self . _load_module () return self . __config_module . load_config ( config_path ) else : logging . info ( \"Skipping: No configuration found at: ' {} '\" . format ( config_path ) ) save_config ( self , config_path , settings ) Use duscovered module to save configuration. Source code in compendium/config/loader.py 52 53 54 55 56 57 58 def save_config ( self , config_path : str , settings : Dict [ Any , Any ]): '''Use duscovered module to save configuration.''' # TODO: Improve error handling logging . info ( \"Saving configuration: ' {} '\" . format ( config_path )) # filename = self.get_filename(config_path) self . _load_module () self . __config_module . save_config ( settings , config_path ) split_filepath ( filepath ) staticmethod Separate filename from filepath. Source code in compendium/config/loader.py 74 75 76 77 @staticmethod def split_filepath ( filepath : str ): '''Separate filename from filepath.''' return filepath . rsplit ( '/' , 1 )","title":"Loader"},{"location":"development/loader/#compendium.config.loader","text":"Control configuration files.","title":"compendium.config.loader"},{"location":"development/loader/#compendium.config.loader.ConfigFile","text":"Manage configuration files using dynamic module loader.","title":"ConfigFile"},{"location":"development/loader/#compendium.config.loader.ConfigFile.__init__","text":"Initialize module loader. Source code in compendium/config/loader.py 16 17 18 19 20 21 def __init__ ( self , filetype = None , driver_directories = [ 'compendium/config/filetypes' ] ): '''Initialize module loader.''' self . filetype = filetype self . driver_directories = driver_directories","title":"__init__()"},{"location":"development/loader/#compendium.config.loader.ConfigFile.get_filename","text":"Get the name of the file. Source code in compendium/config/loader.py 69 70 71 72 @staticmethod def get_filename ( filepath : str ): '''Get the name of the file.''' return filepath . rsplit ( '/' , 1 )[ 1 ]","title":"get_filename()"},{"location":"development/loader/#compendium.config.loader.ConfigFile.get_filetype","text":"Get filetype from filename. Source code in compendium/config/loader.py 79 80 81 82 @staticmethod def get_filetype ( filename : str ): '''Get filetype from filename.''' return filename . split ( '.' )[ - 1 ]","title":"get_filetype()"},{"location":"development/loader/#compendium.config.loader.ConfigFile.load_config","text":"Use discovered module to load configuration. Source code in compendium/config/loader.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 def load_config ( self , config_path : str ): '''Use discovered module to load configuration.''' # TODO: Improve error handling if os . path . exists ( config_path ): logging . info ( \"Retrieving configuration: ' {} '\" . format ( config_path )) if not self . filetype : filename = self . get_filename ( config_path ) self . filetype = self . get_filetype ( filename ) self . _load_module () return self . __config_module . load_config ( config_path ) else : logging . info ( \"Skipping: No configuration found at: ' {} '\" . format ( config_path ) )","title":"load_config()"},{"location":"development/loader/#compendium.config.loader.ConfigFile.save_config","text":"Use duscovered module to save configuration. Source code in compendium/config/loader.py 52 53 54 55 56 57 58 def save_config ( self , config_path : str , settings : Dict [ Any , Any ]): '''Use duscovered module to save configuration.''' # TODO: Improve error handling logging . info ( \"Saving configuration: ' {} '\" . format ( config_path )) # filename = self.get_filename(config_path) self . _load_module () self . __config_module . save_config ( settings , config_path )","title":"save_config()"},{"location":"development/loader/#compendium.config.loader.ConfigFile.split_filepath","text":"Separate filename from filepath. Source code in compendium/config/loader.py 74 75 76 77 @staticmethod def split_filepath ( filepath : str ): '''Separate filename from filepath.''' return filepath . rsplit ( '/' , 1 )","title":"split_filepath()"},{"location":"development/paths/","text":"","title":"Paths"},{"location":"development/settings/","text":"Provide settings modules. Settings Manage settings loaded from confiugrations. defaults: Dict [ Any , Any ] property readonly Return default settings. settings: Dict [ Any , Any ] property readonly Return settings. __init__ ( self , application , ** kwargs ) special Initialize settings store. Source code in compendium/settings.py 19 20 21 22 23 24 25 26 27 28 29 def __init__ ( self , application : str , ** kwargs ): '''Initialize settings store.''' self . __document : Dict [ Any , Any ] = {} self . __settings : Dict [ Any , Any ] = {} if 'defaults' in kwargs and Settings . __defaults == {}: Settings . __defaults = kwargs [ 'defaults' ] # Load settings from configs self . separator : str = kwargs . get ( 'separator' , '/' ) self . prefix = kwargs . get ( 'prefix' , application . upper () + '_' ) add ( self , keypath , value ) Add key/value pair located at keypath. Source code in compendium/settings.py 100 101 102 def add ( self , keypath : str , value : Any ) -> None : '''Add key/value pair located at keypath.''' dpath . new ( self . __settings , keypath , value , self . separator ) append ( self , keypath , value ) Append to a list located at keypath. Source code in compendium/settings.py 88 89 90 91 92 93 94 def append ( self , keypath : str , value : Any ) -> None : '''Append to a list located at keypath.''' store = [ value ] keypath_dir = keypath . split ( self . separator )[ 1 :] for x in reversed ( keypath_dir ): store = { x : store } # type: ignore dpath . merge ( self . __settings , store ) create ( self , keypath , value ) Create new key/value pair located at path. Source code in compendium/settings.py 104 105 106 def create ( self , keypath : str , value : Any ) -> None : '''Create new key/value pair located at path.''' dpath . new ( self . __settings , keypath , value , self . separator ) delete ( self , keypath ) Delete key/value located at keypath. Source code in compendium/settings.py 108 109 110 def delete ( self , keypath : str ) -> None : '''Delete key/value located at keypath.''' dpath . delete ( self . __settings , keypath , self . separator ) get ( self , query , document = None , default = None ) Get value from settings with key. Source code in compendium/settings.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get ( self , query : str , document : Optional [ Dict [ Any , Any ]] = None , default : Optional [ Any ] = None , ): '''Get value from settings with key.''' if not document : document = self . __settings documents = [ self . __environs , document , self . __defaults ] for doc in documents : try : return dpath . get ( doc , query , self . separator ) break except KeyError : pass return default load_environment ( self ) Load environment variables. Source code in compendium/settings.py 41 42 43 44 45 46 47 48 49 50 def load_environment ( self ) -> None : '''Load environment variables.''' # TODO: Change env key from '_' to dict path env = [ { k . replace ( self . prefix , '' ) . lower (): v } for k , v in os . environ . items () if k . startswith ( self . prefix ) ] if env != []: Settings . __environs = { 'env' : env } retrieve ( self , query ) Retrieve value from settings with key. Source code in compendium/settings.py 77 78 79 80 81 82 def retrieve ( self , query : str ): '''Retrieve value from settings with key.''' if not self . __document : self . __document = self . __settings self . __document = dpath . get ( self . __document , query , self . separator ) return self search ( self , query ) Search settings matching query. Source code in compendium/settings.py 84 85 86 def search ( self , query : str ) -> Dict [ Any , Any ]: '''Search settings matching query.''' return dpath . values ( self . __settings , query , self . separator ) update ( self , keypath , value ) Update value located at keypath. Source code in compendium/settings.py 96 97 98 def update ( self , keypath : str , value : Any ) -> None : '''Update value located at keypath.''' dpath . set ( self . __settings , keypath , value , self . separator )","title":"Settings"},{"location":"development/settings/#compendium.settings","text":"Provide settings modules.","title":"compendium.settings"},{"location":"development/settings/#compendium.settings.Settings","text":"Manage settings loaded from confiugrations.","title":"Settings"},{"location":"development/settings/#compendium.settings.Settings.defaults","text":"Return default settings.","title":"defaults"},{"location":"development/settings/#compendium.settings.Settings.settings","text":"Return settings.","title":"settings"},{"location":"development/settings/#compendium.settings.Settings.__init__","text":"Initialize settings store. Source code in compendium/settings.py 19 20 21 22 23 24 25 26 27 28 29 def __init__ ( self , application : str , ** kwargs ): '''Initialize settings store.''' self . __document : Dict [ Any , Any ] = {} self . __settings : Dict [ Any , Any ] = {} if 'defaults' in kwargs and Settings . __defaults == {}: Settings . __defaults = kwargs [ 'defaults' ] # Load settings from configs self . separator : str = kwargs . get ( 'separator' , '/' ) self . prefix = kwargs . get ( 'prefix' , application . upper () + '_' )","title":"__init__()"},{"location":"development/settings/#compendium.settings.Settings.add","text":"Add key/value pair located at keypath. Source code in compendium/settings.py 100 101 102 def add ( self , keypath : str , value : Any ) -> None : '''Add key/value pair located at keypath.''' dpath . new ( self . __settings , keypath , value , self . separator )","title":"add()"},{"location":"development/settings/#compendium.settings.Settings.append","text":"Append to a list located at keypath. Source code in compendium/settings.py 88 89 90 91 92 93 94 def append ( self , keypath : str , value : Any ) -> None : '''Append to a list located at keypath.''' store = [ value ] keypath_dir = keypath . split ( self . separator )[ 1 :] for x in reversed ( keypath_dir ): store = { x : store } # type: ignore dpath . merge ( self . __settings , store )","title":"append()"},{"location":"development/settings/#compendium.settings.Settings.create","text":"Create new key/value pair located at path. Source code in compendium/settings.py 104 105 106 def create ( self , keypath : str , value : Any ) -> None : '''Create new key/value pair located at path.''' dpath . new ( self . __settings , keypath , value , self . separator )","title":"create()"},{"location":"development/settings/#compendium.settings.Settings.delete","text":"Delete key/value located at keypath. Source code in compendium/settings.py 108 109 110 def delete ( self , keypath : str ) -> None : '''Delete key/value located at keypath.''' dpath . delete ( self . __settings , keypath , self . separator )","title":"delete()"},{"location":"development/settings/#compendium.settings.Settings.get","text":"Get value from settings with key. Source code in compendium/settings.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 def get ( self , query : str , document : Optional [ Dict [ Any , Any ]] = None , default : Optional [ Any ] = None , ): '''Get value from settings with key.''' if not document : document = self . __settings documents = [ self . __environs , document , self . __defaults ] for doc in documents : try : return dpath . get ( doc , query , self . separator ) break except KeyError : pass return default","title":"get()"},{"location":"development/settings/#compendium.settings.Settings.load_environment","text":"Load environment variables. Source code in compendium/settings.py 41 42 43 44 45 46 47 48 49 50 def load_environment ( self ) -> None : '''Load environment variables.''' # TODO: Change env key from '_' to dict path env = [ { k . replace ( self . prefix , '' ) . lower (): v } for k , v in os . environ . items () if k . startswith ( self . prefix ) ] if env != []: Settings . __environs = { 'env' : env }","title":"load_environment()"},{"location":"development/settings/#compendium.settings.Settings.retrieve","text":"Retrieve value from settings with key. Source code in compendium/settings.py 77 78 79 80 81 82 def retrieve ( self , query : str ): '''Retrieve value from settings with key.''' if not self . __document : self . __document = self . __settings self . __document = dpath . get ( self . __document , query , self . separator ) return self","title":"retrieve()"},{"location":"development/settings/#compendium.settings.Settings.search","text":"Search settings matching query. Source code in compendium/settings.py 84 85 86 def search ( self , query : str ) -> Dict [ Any , Any ]: '''Search settings matching query.''' return dpath . values ( self . __settings , query , self . separator )","title":"search()"},{"location":"development/settings/#compendium.settings.Settings.update","text":"Update value located at keypath. Source code in compendium/settings.py 96 97 98 def update ( self , keypath : str , value : Any ) -> None : '''Update value located at keypath.''' dpath . set ( self . __settings , keypath , value , self . separator )","title":"update()"},{"location":"development/filetypes/json/","text":"Control JSON module. JsonConfig Manage JSON configurations. __init__ ( self , ** kwargs ) special Initialize JSON configuration module. Source code in compendium/config/filetypes/json.py 18 19 20 21 22 def __init__ ( self , ** kwargs ): '''Initialize JSON configuration module.''' logging . info ( 'Inializing JsonConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . encoder = kwargs . get ( 'encoder' , str ) filetypes () staticmethod Return support JSON filetypes. Source code in compendium/config/filetypes/json.py 24 25 26 27 @staticmethod def filetypes (): '''Return support JSON filetypes.''' return [ 'json' ] load_config ( self , filepath ) Load settings from JSON configuration. Source code in compendium/config/filetypes/json.py 29 30 31 32 33 34 35 36 37 def load_config ( self , filepath ): '''Load settings from JSON configuration.''' logging . info ( 'JsonConfig: loading configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = json . load ( f ) else : content = {} return content save_config ( self , content , filepath ) Save settings to JSON configuration. Source code in compendium/config/filetypes/json.py 39 40 41 42 43 44 45 46 47 48 49 50 51 def save_config ( self , content , filepath ): '''Save settings to JSON configuration.''' try : with open ( filepath , 'w' ) as f : json . dump ( content , f , indent = 2 , sort_keys = True , default = self . encoder ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'Error: You do not have permission to write to this file' ) raise","title":"Json"},{"location":"development/filetypes/json/#compendium.config.filetypes.json","text":"Control JSON module.","title":"compendium.config.filetypes.json"},{"location":"development/filetypes/json/#compendium.config.filetypes.json.JsonConfig","text":"Manage JSON configurations.","title":"JsonConfig"},{"location":"development/filetypes/json/#compendium.config.filetypes.json.JsonConfig.__init__","text":"Initialize JSON configuration module. Source code in compendium/config/filetypes/json.py 18 19 20 21 22 def __init__ ( self , ** kwargs ): '''Initialize JSON configuration module.''' logging . info ( 'Inializing JsonConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . encoder = kwargs . get ( 'encoder' , str )","title":"__init__()"},{"location":"development/filetypes/json/#compendium.config.filetypes.json.JsonConfig.filetypes","text":"Return support JSON filetypes. Source code in compendium/config/filetypes/json.py 24 25 26 27 @staticmethod def filetypes (): '''Return support JSON filetypes.''' return [ 'json' ]","title":"filetypes()"},{"location":"development/filetypes/json/#compendium.config.filetypes.json.JsonConfig.load_config","text":"Load settings from JSON configuration. Source code in compendium/config/filetypes/json.py 29 30 31 32 33 34 35 36 37 def load_config ( self , filepath ): '''Load settings from JSON configuration.''' logging . info ( 'JsonConfig: loading configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = json . load ( f ) else : content = {} return content","title":"load_config()"},{"location":"development/filetypes/json/#compendium.config.filetypes.json.JsonConfig.save_config","text":"Save settings to JSON configuration. Source code in compendium/config/filetypes/json.py 39 40 41 42 43 44 45 46 47 48 49 50 51 def save_config ( self , content , filepath ): '''Save settings to JSON configuration.''' try : with open ( filepath , 'w' ) as f : json . dump ( content , f , indent = 2 , sort_keys = True , default = self . encoder ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'Error: You do not have permission to write to this file' ) raise","title":"save_config()"},{"location":"development/filetypes/toml/","text":"Control toml module. TomlConfig Manage toml configurations. __init__ ( self , ** kwargs ) special Initialize toml module. Source code in compendium/config/filetypes/toml.py 18 19 20 21 def __init__ ( self , ** kwargs ): '''Initialize toml module.''' logging . info ( 'Inializing TomlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) filetypes () staticmethod Return supported filetypes. Source code in compendium/config/filetypes/toml.py 23 24 25 26 27 28 @staticmethod def filetypes (): '''Return supported filetypes.''' return [ 'cfg' , 'conf' , 'config' , 'cnf' , 'ini' , 'toml' , 'tml' ] load_config ( self , filepath ) Load settings from toml configuration. Source code in compendium/config/filetypes/toml.py 30 31 32 33 34 35 36 37 38 def load_config ( self , filepath ): '''Load settings from toml configuration.''' logging . info ( 'TomlConfig: loading configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = tomlkit . parse ( f . read ()) else : content = {} return content save_config ( self , content , filepath ) Save settings to toml configuration. Source code in compendium/config/filetypes/toml.py 40 41 42 43 44 45 46 47 48 49 50 51 def save_config ( self , content , filepath ): '''Save settings to toml configuration.''' logging . info ( 'TomlConfig: saving configuration file' ) try : with open ( filepath , 'w' ) as f : f . write ( tomlkit . dumps ( content )) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'Error: You do not have permission to write to this file' ) raise","title":"Toml"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml","text":"Control toml module.","title":"compendium.config.filetypes.toml"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml.TomlConfig","text":"Manage toml configurations.","title":"TomlConfig"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml.TomlConfig.__init__","text":"Initialize toml module. Source code in compendium/config/filetypes/toml.py 18 19 20 21 def __init__ ( self , ** kwargs ): '''Initialize toml module.''' logging . info ( 'Inializing TomlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' )","title":"__init__()"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml.TomlConfig.filetypes","text":"Return supported filetypes. Source code in compendium/config/filetypes/toml.py 23 24 25 26 27 28 @staticmethod def filetypes (): '''Return supported filetypes.''' return [ 'cfg' , 'conf' , 'config' , 'cnf' , 'ini' , 'toml' , 'tml' ]","title":"filetypes()"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml.TomlConfig.load_config","text":"Load settings from toml configuration. Source code in compendium/config/filetypes/toml.py 30 31 32 33 34 35 36 37 38 def load_config ( self , filepath ): '''Load settings from toml configuration.''' logging . info ( 'TomlConfig: loading configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = tomlkit . parse ( f . read ()) else : content = {} return content","title":"load_config()"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml.TomlConfig.save_config","text":"Save settings to toml configuration. Source code in compendium/config/filetypes/toml.py 40 41 42 43 44 45 46 47 48 49 50 51 def save_config ( self , content , filepath ): '''Save settings to toml configuration.''' logging . info ( 'TomlConfig: saving configuration file' ) try : with open ( filepath , 'w' ) as f : f . write ( tomlkit . dumps ( content )) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'Error: You do not have permission to write to this file' ) raise","title":"save_config()"},{"location":"development/filetypes/xml/","text":"Control XML module. XmlConfig Manage XML configurations. __init__ ( self , ** kwargs ) special Initialize XML configuration module. Source code in compendium/config/filetypes/xml.py 17 18 19 20 21 22 23 def __init__ ( self , ** kwargs ): '''Initialize XML configuration module.''' logging . info ( 'Inializing XmlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . encoder = kwargs . get ( 'encoder' , str ) self . process_namespaces = kwargs . get ( 'process_namespaces' , False ) self . namespaces = kwargs . get ( 'namespaces' , None ) filetypes () staticmethod Return supported XML configuration filetypes. Source code in compendium/config/filetypes/xml.py 25 26 27 28 @staticmethod def filetypes (): '''Return supported XML configuration filetypes.''' return [ 'xml' ] load_config ( self , filepath ) Load settings from XML configuration. Source code in compendium/config/filetypes/xml.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def load_config ( self , filepath ): '''Load settings from XML configuration.''' logging . info ( 'XmlConfig: loading configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' ) as f : content = xmltodict . parse ( f . read (), encoding = self . encoding , process_namespaces = self . process_namespaces , namespaces = self . namespaces ) else : content = {} return content save_config ( self , content , filepath ) Save settings to XML configuration. Source code in compendium/config/filetypes/xml.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def save_config ( self , content , filepath ): '''Save settings to XML configuration.''' try : with open ( filepath , 'w' ) as f : f . write ( xmltodict . unparse ( content , encoding = self . encoding , pretty = True ) ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'Error: You do not have permission to write to this file' ) raise","title":"Xml"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml","text":"Control XML module.","title":"compendium.config.filetypes.xml"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml.XmlConfig","text":"Manage XML configurations.","title":"XmlConfig"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml.XmlConfig.__init__","text":"Initialize XML configuration module. Source code in compendium/config/filetypes/xml.py 17 18 19 20 21 22 23 def __init__ ( self , ** kwargs ): '''Initialize XML configuration module.''' logging . info ( 'Inializing XmlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . encoder = kwargs . get ( 'encoder' , str ) self . process_namespaces = kwargs . get ( 'process_namespaces' , False ) self . namespaces = kwargs . get ( 'namespaces' , None )","title":"__init__()"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml.XmlConfig.filetypes","text":"Return supported XML configuration filetypes. Source code in compendium/config/filetypes/xml.py 25 26 27 28 @staticmethod def filetypes (): '''Return supported XML configuration filetypes.''' return [ 'xml' ]","title":"filetypes()"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml.XmlConfig.load_config","text":"Load settings from XML configuration. Source code in compendium/config/filetypes/xml.py 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def load_config ( self , filepath ): '''Load settings from XML configuration.''' logging . info ( 'XmlConfig: loading configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' ) as f : content = xmltodict . parse ( f . read (), encoding = self . encoding , process_namespaces = self . process_namespaces , namespaces = self . namespaces ) else : content = {} return content","title":"load_config()"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml.XmlConfig.save_config","text":"Save settings to XML configuration. Source code in compendium/config/filetypes/xml.py 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 def save_config ( self , content , filepath ): '''Save settings to XML configuration.''' try : with open ( filepath , 'w' ) as f : f . write ( xmltodict . unparse ( content , encoding = self . encoding , pretty = True ) ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'Error: You do not have permission to write to this file' ) raise","title":"save_config()"},{"location":"development/filetypes/yaml/","text":"Control YAML configuration module. YamlConfig Manage YAML configuration files. __init__ ( self , ** kwargs ) special Initialize YAML configuration module. Source code in compendium/config/filetypes/yaml.py 18 19 20 21 22 def __init__ ( self , ** kwargs ): '''Initialize YAML configuration module.''' logging . info ( 'Inializing YamlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . yaml = YAML ( typ = 'safe' ) filetypes () staticmethod Return support YAML filetypes. Source code in compendium/config/filetypes/yaml.py 24 25 26 27 @staticmethod def filetypes (): '''Return support YAML filetypes.''' return [ 'yaml' , 'yml' ] load_config ( self , filepath ) Load settings from YAML configuration. Source code in compendium/config/filetypes/yaml.py 29 30 31 32 33 34 35 36 37 38 39 def load_config ( self , filepath ): '''Load settings from YAML configuration.''' logging . info ( \"YamlConfig loading configuration file {} \" . format ( filepath ) ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = self . yaml . load ( f ) else : content = {} return content save_config ( self , content , filepath ) Save settings to YAML configuration. Source code in compendium/config/filetypes/yaml.py 41 42 43 44 45 46 47 48 49 50 51 def save_config ( self , content , filepath ): '''Save settings to YAML configuration.''' try : with open ( filepath , 'w' ) as f : self . yaml . dump ( content , f ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'Error: You do not have permission to write to this file' ) raise","title":"Yaml"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml","text":"Control YAML configuration module.","title":"compendium.config.filetypes.yaml"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml.YamlConfig","text":"Manage YAML configuration files.","title":"YamlConfig"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml.YamlConfig.__init__","text":"Initialize YAML configuration module. Source code in compendium/config/filetypes/yaml.py 18 19 20 21 22 def __init__ ( self , ** kwargs ): '''Initialize YAML configuration module.''' logging . info ( 'Inializing YamlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . yaml = YAML ( typ = 'safe' )","title":"__init__()"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml.YamlConfig.filetypes","text":"Return support YAML filetypes. Source code in compendium/config/filetypes/yaml.py 24 25 26 27 @staticmethod def filetypes (): '''Return support YAML filetypes.''' return [ 'yaml' , 'yml' ]","title":"filetypes()"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml.YamlConfig.load_config","text":"Load settings from YAML configuration. Source code in compendium/config/filetypes/yaml.py 29 30 31 32 33 34 35 36 37 38 39 def load_config ( self , filepath ): '''Load settings from YAML configuration.''' logging . info ( \"YamlConfig loading configuration file {} \" . format ( filepath ) ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = self . yaml . load ( f ) else : content = {} return content","title":"load_config()"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml.YamlConfig.save_config","text":"Save settings to YAML configuration. Source code in compendium/config/filetypes/yaml.py 41 42 43 44 45 46 47 48 49 50 51 def save_config ( self , content , filepath ): '''Save settings to YAML configuration.''' try : with open ( filepath , 'w' ) as f : self . yaml . dump ( content , f ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'Error: You do not have permission to write to this file' ) raise","title":"save_config()"}]}