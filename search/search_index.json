{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Compendium This website provides the project documentation for Python Compendium. Overview Compendium is a configuration management tool Features Configurations Configuration Manager Hierarchical Configuration Manager Nested Configuration Manager Filetypes: JSON support INI support TOML support XML support YAML support Extensible Install pip install compendium","title":"Welcome to Compendium"},{"location":"#welcome-to-compendium","text":"This website provides the project documentation for Python Compendium.","title":"Welcome to Compendium"},{"location":"#overview","text":"Compendium is a configuration management tool","title":"Overview"},{"location":"#features","text":"Configurations Configuration Manager Hierarchical Configuration Manager Nested Configuration Manager Filetypes: JSON support INI support TOML support XML support YAML support Extensible","title":"Features"},{"location":"#install","text":"pip install compendium","title":"Install"},{"location":"configuration/","text":"Configuration Manager should optionaly use repo pattern should save configs as different types ConfigManager: The ConfigManager is a simple configuration manager that loads a single configuration at a time. merge_strategy: None merge_sections: [] writable: False NestedConfigManager: The NestedConfigManager is a configuration manager for configurations nested within structured directory layout. This can be conceptualized as Maven like nested-pom configurations HierarchyConfigManager: The HierarchyConfigManager is a configuration manager that can be used to manager configurations. It is intended for system using Hierarchical File System (HFS). enable_system_paths: False enable_user_paths: False enable_local_paths: True","title":"Configuration Manager"},{"location":"configuration/#configuration-manager","text":"should optionaly use repo pattern should save configs as different types","title":"Configuration Manager"},{"location":"configuration/#configmanager","text":"The ConfigManager is a simple configuration manager that loads a single configuration at a time. merge_strategy: None merge_sections: [] writable: False","title":"ConfigManager:"},{"location":"configuration/#nestedconfigmanager","text":"The NestedConfigManager is a configuration manager for configurations nested within structured directory layout. This can be conceptualized as Maven like nested-pom configurations","title":"NestedConfigManager:"},{"location":"configuration/#hierarchyconfigmanager","text":"The HierarchyConfigManager is a configuration manager that can be used to manager configurations. It is intended for system using Hierarchical File System (HFS). enable_system_paths: False enable_user_paths: False enable_local_paths: True","title":"HierarchyConfigManager:"},{"location":"schema/","text":"","title":"Schema"},{"location":"settings/","text":"Settings Configuration Layers Layers: Environment Variables Configuration Files Default Configurations Environment Variables Environment variables are variables provided by the current shell. Variables provided this way are loaded once on startup and are read-only. These settings are the first queried for entries. Configuration Files Configuration files are the primary storage type for settings. These file can either be user or system configuration files. The last configuration file found is one loaded. This file may optionally read-only or writable. Defaults Defaults are settings loaded from a selected configuration file. This configuration is a read only file. Settings provided by defaults are the last settings searched for entries before an error is thrown. Configuring Settings Manager application - Name of the application instance. path - Path to the configuration files. separator - Character used to separate search paths within search. prefix - Prefix used to pull environment variables from others. Managing Settings from compendium.settings import Settings cfg = Settings(application='app', path='afile.toml') cfg.load() Searching Data Getting settings cfg.get('/servers/**/ip') Search settings query = cfg.search('/servers/**/ip') Adding Settings Create settings cfg.create('/test', 'test') Update settings cfg.update('/owner/name', 'Tom Waits') Remove Settings Delete settings cfg.delete('/owner/name')","title":"Settings"},{"location":"settings/#settings","text":"","title":"Settings"},{"location":"settings/#configuration-layers","text":"Layers: Environment Variables Configuration Files Default Configurations","title":"Configuration Layers"},{"location":"settings/#environment-variables","text":"Environment variables are variables provided by the current shell. Variables provided this way are loaded once on startup and are read-only. These settings are the first queried for entries.","title":"Environment Variables"},{"location":"settings/#configuration-files","text":"Configuration files are the primary storage type for settings. These file can either be user or system configuration files. The last configuration file found is one loaded. This file may optionally read-only or writable.","title":"Configuration Files"},{"location":"settings/#defaults","text":"Defaults are settings loaded from a selected configuration file. This configuration is a read only file. Settings provided by defaults are the last settings searched for entries before an error is thrown.","title":"Defaults"},{"location":"settings/#configuring-settings-manager","text":"application - Name of the application instance. path - Path to the configuration files. separator - Character used to separate search paths within search. prefix - Prefix used to pull environment variables from others.","title":"Configuring Settings Manager"},{"location":"settings/#managing-settings","text":"from compendium.settings import Settings cfg = Settings(application='app', path='afile.toml') cfg.load()","title":"Managing Settings"},{"location":"settings/#searching-data","text":"","title":"Searching Data"},{"location":"settings/#getting-settings","text":"cfg.get('/servers/**/ip')","title":"Getting settings"},{"location":"settings/#search-settings","text":"query = cfg.search('/servers/**/ip')","title":"Search settings"},{"location":"settings/#adding-settings","text":"","title":"Adding Settings"},{"location":"settings/#create-settings","text":"cfg.create('/test', 'test')","title":"Create settings"},{"location":"settings/#update-settings","text":"cfg.update('/owner/name', 'Tom Waits')","title":"Update settings"},{"location":"settings/#remove-settings","text":"","title":"Remove Settings"},{"location":"settings/#delete-settings","text":"cfg.delete('/owner/name')","title":"Delete settings"},{"location":"development/config_base/","text":"Provide plugin base for configuration modules. ConfigBase Define required configuration module methods. dump_config ( self , content , filepath ) Save confgration to file. Source code in compendium/config/config_base.py 19 20 21 @abstractmethod def dump_config ( self , content , filepath ): '''Save confgration to file.''' load_config ( self , filepath ) Load configuration from file. Source code in compendium/config/config_base.py 15 16 17 @abstractmethod def load_config ( self , filepath ): '''Load configuration from file.'''","title":"Config Base"},{"location":"development/config_base/#compendium.config.config_base","text":"Provide plugin base for configuration modules.","title":"compendium.config.config_base"},{"location":"development/config_base/#compendium.config.config_base.ConfigBase","text":"Define required configuration module methods.","title":"ConfigBase"},{"location":"development/config_base/#compendium.config.config_base.ConfigBase.dump_config","text":"Save confgration to file. Source code in compendium/config/config_base.py 19 20 21 @abstractmethod def dump_config ( self , content , filepath ): '''Save confgration to file.'''","title":"dump_config()"},{"location":"development/config_base/#compendium.config.config_base.ConfigBase.load_config","text":"Load configuration from file. Source code in compendium/config/config_base.py 15 16 17 @abstractmethod def load_config ( self , filepath ): '''Load configuration from file.'''","title":"load_config()"},{"location":"development/config_manager/","text":"Provide settings modules. ConfigManager Manage settings from cache. application: str property readonly Get application name. defaults: Dict [ Any , Any ] property readonly Get defaults. filepaths: List [ str ] property readonly Retrieve filepaths. head: str property readonly Retrieve head filepath. __init__ ( self , application , ** kwargs ) special Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last Source code in compendium/config_manager.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def __init__ ( self , application : str , ** kwargs ): '''Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last ''' if 'log_level' in kwargs : log . setLevel ( getattr ( logging , kwargs . pop ( 'log_level' ) . upper ())) if 'log_handler' in kwargs : log_handler = kwargs . pop ( 'log_handler' ) log . addHandler ( logging . StreamHandler ( log_handler )) # type: ignore self . _filepaths : List [ str ] = [] self . filename = kwargs . get ( 'filename' , 'config.toml' ) self . filetype = kwargs . get ( 'filetype' , self . get_filetype ( self . filename )) ConfigFile . __init__ ( self , self . filetype , ** kwargs ) self . settings = Settings ( application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : Set [ str ] = kwargs . get ( 'merge_sections' , set ()) self . writable : Optional [ bool ] = kwargs . get ( 'writable' , False ) dump ( self , filepath , filetype = None ) Save settings to configuraiton. Source code in compendium/config_manager.py 137 138 139 def dump ( self , filepath : str , filetype : Optional [ str ] = None ) -> None : '''Save settings to configuraiton.''' self . dump_config ( self . head , filetype , self . settings ) get_filename ( filepath ) staticmethod Get the name of the file. Source code in compendium/config_manager.py 93 94 95 96 @staticmethod def get_filename ( filepath : str ) -> str : '''Get the name of the file.''' return filepath . rsplit ( '/' , 1 )[ 1 ] get_filetype ( filename ) staticmethod Get filetype from filename. Source code in compendium/config_manager.py 98 99 100 101 @staticmethod def get_filetype ( filename : str ) -> str : '''Get filetype from filename.''' return filename . split ( '.' )[ - 1 ] load ( self , filepath , filetype = None ) Load settings from configuration file. Source code in compendium/config_manager.py 132 133 134 135 def load ( self , filepath : str , filetype : Optional [ str ] = None ) -> None : '''Load settings from configuration file.''' self . __get_filepaths ( filepath = filepath ) self . _initialize_settings ( self . load_config ( self . head , filetype )) load_filepath ( self , filepath ) Load settings from configuration in filepath. Source code in compendium/config_manager.py 117 118 119 120 121 122 123 def load_filepath ( self , filepath : str ) -> None : '''Load settings from configuration in filepath.''' logging . debug ( \"searching for {} \" . format ( filepath )) print ( 'troubleshooting:' , filepath ) if self . _check_filepath ( filepath ): self . _filepaths . append ( filepath ) split_filepath ( filepath ) staticmethod Separate filename from filepath. Source code in compendium/config_manager.py 88 89 90 91 @staticmethod def split_filepath ( filepath : str ) -> List [ str ]: '''Separate filename from filepath.''' return filepath . rsplit ( '/' , 1 ) HierarchyConfigManager Manage settings from hierarchy configurations. __init__ ( self , application , ** kwargs ) special Initialize settings from hirarchy filepaths. Parameters str Name of application. list, optional Include sections to be merged list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded bool, optional Enable system filepath lookup for configurations. bool, optional Enable user filepath lookup for configurations. bool, optional Enable local filepath lookup for configurations. Source code in compendium/config_manager.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 def __init__ ( self , application : str , ** kwargs ): '''Initialize settings from hirarchy filepaths. Parameters ---------- application: str Name of application. merge_sections: list, optional Include sections to be merged merge_strategy: list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded enable_system_filepaths: bool, optional Enable system filepath lookup for configurations. enable_user_filepaths: bool, optional Enable user filepath lookup for configurations. enable_local_filepaths: bool, optional Enable local filepath lookup for configurations. ''' super () . __init__ ( application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : Set [ str ] = kwargs . get ( 'merge_sections' , set ()) self . enable_system_filepaths : Union [ str , bool ] = kwargs . get ( 'enable_system_filepaths' , False ) self . enable_user_filepaths : Union [ str , bool ] = kwargs . get ( 'enable_user_filepaths' , False ) self . enable_local_filepaths : Union [ str , bool ] = kwargs . get ( 'enable_local_filepaths' , True ) load_configs ( self ) Load settings from hierarchy filepaths. Source code in compendium/config_manager.py 295 296 297 298 299 300 301 def load_configs ( self ): '''Load settings from hierarchy filepaths.''' self . __get_filepaths () settings : Dict [ Any , Any ] = {} for filepath in self . _filepaths : self . settings . merge ( self . load_config ( filepath )) self . _initialize_settings ( settings ) NestedConfigManager Manage settings from nested configurations. __init__ ( self , application , ** kwargs ) special Initialize nested settings management. Source code in compendium/config_manager.py 154 155 156 def __init__ ( self , application : str , ** kwargs ): '''Initialize nested settings management.''' super () . __init__ ( application , ** kwargs ) load_configs ( self , filepath = None , filetype = None ) Load settings from nested configuration. Source code in compendium/config_manager.py 167 168 169 170 171 172 173 174 175 176 177 def load_configs ( self , filepath : Optional [ str ] = None , filetype : Optional [ str ] = None ): '''Load settings from nested configuration.''' self . __get_filepaths () settings = [] for filepath in self . _filepaths : settings . append ( { 'filepath' : filepath , ** self . load_config ( filepath )} ) self . _initialize_settings ({ 'settings' : settings })","title":"Config Manager"},{"location":"development/config_manager/#compendium.config_manager","text":"Provide settings modules.","title":"compendium.config_manager"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager","text":"Manage settings from cache.","title":"ConfigManager"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.application","text":"Get application name.","title":"application"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.defaults","text":"Get defaults.","title":"defaults"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.filepaths","text":"Retrieve filepaths.","title":"filepaths"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.head","text":"Retrieve head filepath.","title":"head"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.__init__","text":"Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last Source code in compendium/config_manager.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def __init__ ( self , application : str , ** kwargs ): '''Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last ''' if 'log_level' in kwargs : log . setLevel ( getattr ( logging , kwargs . pop ( 'log_level' ) . upper ())) if 'log_handler' in kwargs : log_handler = kwargs . pop ( 'log_handler' ) log . addHandler ( logging . StreamHandler ( log_handler )) # type: ignore self . _filepaths : List [ str ] = [] self . filename = kwargs . get ( 'filename' , 'config.toml' ) self . filetype = kwargs . get ( 'filetype' , self . get_filetype ( self . filename )) ConfigFile . __init__ ( self , self . filetype , ** kwargs ) self . settings = Settings ( application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : Set [ str ] = kwargs . get ( 'merge_sections' , set ()) self . writable : Optional [ bool ] = kwargs . get ( 'writable' , False )","title":"__init__()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.dump","text":"Save settings to configuraiton. Source code in compendium/config_manager.py 137 138 139 def dump ( self , filepath : str , filetype : Optional [ str ] = None ) -> None : '''Save settings to configuraiton.''' self . dump_config ( self . head , filetype , self . settings )","title":"dump()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.get_filename","text":"Get the name of the file. Source code in compendium/config_manager.py 93 94 95 96 @staticmethod def get_filename ( filepath : str ) -> str : '''Get the name of the file.''' return filepath . rsplit ( '/' , 1 )[ 1 ]","title":"get_filename()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.get_filetype","text":"Get filetype from filename. Source code in compendium/config_manager.py 98 99 100 101 @staticmethod def get_filetype ( filename : str ) -> str : '''Get filetype from filename.''' return filename . split ( '.' )[ - 1 ]","title":"get_filetype()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.load","text":"Load settings from configuration file. Source code in compendium/config_manager.py 132 133 134 135 def load ( self , filepath : str , filetype : Optional [ str ] = None ) -> None : '''Load settings from configuration file.''' self . __get_filepaths ( filepath = filepath ) self . _initialize_settings ( self . load_config ( self . head , filetype ))","title":"load()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.load_filepath","text":"Load settings from configuration in filepath. Source code in compendium/config_manager.py 117 118 119 120 121 122 123 def load_filepath ( self , filepath : str ) -> None : '''Load settings from configuration in filepath.''' logging . debug ( \"searching for {} \" . format ( filepath )) print ( 'troubleshooting:' , filepath ) if self . _check_filepath ( filepath ): self . _filepaths . append ( filepath )","title":"load_filepath()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.split_filepath","text":"Separate filename from filepath. Source code in compendium/config_manager.py 88 89 90 91 @staticmethod def split_filepath ( filepath : str ) -> List [ str ]: '''Separate filename from filepath.''' return filepath . rsplit ( '/' , 1 )","title":"split_filepath()"},{"location":"development/config_manager/#compendium.config_manager.HierarchyConfigManager","text":"Manage settings from hierarchy configurations.","title":"HierarchyConfigManager"},{"location":"development/config_manager/#compendium.config_manager.HierarchyConfigManager.__init__","text":"Initialize settings from hirarchy filepaths.","title":"__init__()"},{"location":"development/config_manager/#parameters","text":"str Name of application. list, optional Include sections to be merged list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded bool, optional Enable system filepath lookup for configurations. bool, optional Enable user filepath lookup for configurations. bool, optional Enable local filepath lookup for configurations. Source code in compendium/config_manager.py 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 def __init__ ( self , application : str , ** kwargs ): '''Initialize settings from hirarchy filepaths. Parameters ---------- application: str Name of application. merge_sections: list, optional Include sections to be merged merge_strategy: list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded enable_system_filepaths: bool, optional Enable system filepath lookup for configurations. enable_user_filepaths: bool, optional Enable user filepath lookup for configurations. enable_local_filepaths: bool, optional Enable local filepath lookup for configurations. ''' super () . __init__ ( application , ** kwargs ) self . merge_strategy : Optional [ str ] = kwargs . get ( 'merge_strategy' , None ) self . merge_sections : Set [ str ] = kwargs . get ( 'merge_sections' , set ()) self . enable_system_filepaths : Union [ str , bool ] = kwargs . get ( 'enable_system_filepaths' , False ) self . enable_user_filepaths : Union [ str , bool ] = kwargs . get ( 'enable_user_filepaths' , False ) self . enable_local_filepaths : Union [ str , bool ] = kwargs . get ( 'enable_local_filepaths' , True )","title":"Parameters"},{"location":"development/config_manager/#compendium.config_manager.HierarchyConfigManager.load_configs","text":"Load settings from hierarchy filepaths. Source code in compendium/config_manager.py 295 296 297 298 299 300 301 def load_configs ( self ): '''Load settings from hierarchy filepaths.''' self . __get_filepaths () settings : Dict [ Any , Any ] = {} for filepath in self . _filepaths : self . settings . merge ( self . load_config ( filepath )) self . _initialize_settings ( settings )","title":"load_configs()"},{"location":"development/config_manager/#compendium.config_manager.NestedConfigManager","text":"Manage settings from nested configurations.","title":"NestedConfigManager"},{"location":"development/config_manager/#compendium.config_manager.NestedConfigManager.__init__","text":"Initialize nested settings management. Source code in compendium/config_manager.py 154 155 156 def __init__ ( self , application : str , ** kwargs ): '''Initialize nested settings management.''' super () . __init__ ( application , ** kwargs )","title":"__init__()"},{"location":"development/config_manager/#compendium.config_manager.NestedConfigManager.load_configs","text":"Load settings from nested configuration. Source code in compendium/config_manager.py 167 168 169 170 171 172 173 174 175 176 177 def load_configs ( self , filepath : Optional [ str ] = None , filetype : Optional [ str ] = None ): '''Load settings from nested configuration.''' self . __get_filepaths () settings = [] for filepath in self . _filepaths : settings . append ( { 'filepath' : filepath , ** self . load_config ( filepath )} ) self . _initialize_settings ({ 'settings' : settings })","title":"load_configs()"},{"location":"development/loader/","text":"Control configuration files. ConfigFile Manage configuration files using dynamic module loader. __init__ ( self , filetype = 'toml' , driver_paths = set (), ** kwargs ) special Initialize module loader. Source code in compendium/config/loader.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , filetype : str = 'toml' , driver_paths : Set [ str ] = set (), ** kwargs , ): '''Initialize module loader.''' # TODO: writable / readonly self . filetype = filetype self . basepath : Optional [ str ] = None self . driver_paths : Set [ str ] = { os . path . join ( 'compendium' , 'config' , 'filetypes' ) } if driver_paths != set (): self . driver_paths . update ( driver_paths ) dump_config ( self , filepath , filetype = None , settings = None ) Use discovered module to save configuration. Source code in compendium/config/loader.py 74 75 76 77 78 79 80 81 82 83 84 def dump_config ( self , filepath : str , filetype : Optional [ str ] = None , settings : Settings = None , ): '''Use discovered module to save configuration.''' # TODO: Improve error handling logging . info ( \"Saving configuration: ' {} '\" . format ( filepath )) self . _load_module ( filetype ) self . __config_module . dump_config ( settings , filepath ) load_config ( self , filepath , filetype = None ) Use discovered module to load configuration. Source code in compendium/config/loader.py 62 63 64 65 66 67 68 69 70 71 72 def load_config ( self , filepath : str , filetype : str = None ): '''Use discovered module to load configuration.''' # TODO: Improve error handling if os . path . exists ( filepath ): logging . info ( \"Retrieving configuration: ' {} '\" . format ( filepath )) self . _load_module ( filetype or self . filetype ) return self . __config_module . load_config ( filepath ) else : raise exceptions . CompendiumConfigFileError ( \"Skipping: No configuration found at: ' {} '\" . format ( filepath ) )","title":"Loader"},{"location":"development/loader/#compendium.config.loader","text":"Control configuration files.","title":"compendium.config.loader"},{"location":"development/loader/#compendium.config.loader.ConfigFile","text":"Manage configuration files using dynamic module loader.","title":"ConfigFile"},{"location":"development/loader/#compendium.config.loader.ConfigFile.__init__","text":"Initialize module loader. Source code in compendium/config/loader.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 def __init__ ( self , filetype : str = 'toml' , driver_paths : Set [ str ] = set (), ** kwargs , ): '''Initialize module loader.''' # TODO: writable / readonly self . filetype = filetype self . basepath : Optional [ str ] = None self . driver_paths : Set [ str ] = { os . path . join ( 'compendium' , 'config' , 'filetypes' ) } if driver_paths != set (): self . driver_paths . update ( driver_paths )","title":"__init__()"},{"location":"development/loader/#compendium.config.loader.ConfigFile.dump_config","text":"Use discovered module to save configuration. Source code in compendium/config/loader.py 74 75 76 77 78 79 80 81 82 83 84 def dump_config ( self , filepath : str , filetype : Optional [ str ] = None , settings : Settings = None , ): '''Use discovered module to save configuration.''' # TODO: Improve error handling logging . info ( \"Saving configuration: ' {} '\" . format ( filepath )) self . _load_module ( filetype ) self . __config_module . dump_config ( settings , filepath )","title":"dump_config()"},{"location":"development/loader/#compendium.config.loader.ConfigFile.load_config","text":"Use discovered module to load configuration. Source code in compendium/config/loader.py 62 63 64 65 66 67 68 69 70 71 72 def load_config ( self , filepath : str , filetype : str = None ): '''Use discovered module to load configuration.''' # TODO: Improve error handling if os . path . exists ( filepath ): logging . info ( \"Retrieving configuration: ' {} '\" . format ( filepath )) self . _load_module ( filetype or self . filetype ) return self . __config_module . load_config ( filepath ) else : raise exceptions . CompendiumConfigFileError ( \"Skipping: No configuration found at: ' {} '\" . format ( filepath ) )","title":"load_config()"},{"location":"development/paths/","text":"","title":"Paths"},{"location":"development/settings/","text":"Provide settings modules. Settings Manage settings loaded from confiugrations. defaults: Dict [ Any , Any ] property readonly Return default settings. settings: Dict [ Any , Any ] property readonly Return settings. __init__ ( self , application , ** kwargs ) special Initialize settings store. Source code in compendium/settings.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def __init__ ( self , application : str , ** kwargs ): '''Initialize settings store.''' self . application = application self . __document : Dict [ Any , Any ] = {} if 'defaults' in kwargs and Settings . __defaults == {}: Settings . __defaults = kwargs [ 'defaults' ] # Load settings from configs self . prefix = kwargs . get ( 'prefix' , \" {a} _\" . format ( a = application . upper ())) self . __separator : str = kwargs . pop ( 'separator' , '/' ) super () . __init__ ( ** kwargs ) print ( 'data' , self . data ) __repr__ ( self ) special Get string representaion. Source code in compendium/settings.py 36 37 38 def __repr__ ( self ) -> str : '''Get string representaion.''' return f \" { self . data } \" add ( self , keypath , value ) Add key/value pair located at keypath. Source code in compendium/settings.py 116 117 118 def add ( self , keypath : str , value : Any ) -> None : '''Add key/value pair located at keypath.''' dpath . new ( self . data , keypath , value , self . __separator ) append ( self , keypath , value ) Append to a list located at keypath. Source code in compendium/settings.py 104 105 106 107 108 109 110 def append ( self , keypath : str , value : Any ) -> None : '''Append to a list located at keypath.''' store = [ value ] keypath_dir = keypath . split ( self . __separator )[ 1 :] for x in reversed ( keypath_dir ): store = { x : store } # type: ignore dpath . merge ( self . data , store ) create ( self , keypath , value ) Create new key/value pair located at path. Source code in compendium/settings.py 120 121 122 def create ( self , keypath : str , value : Any ) -> None : '''Create new key/value pair located at path.''' dpath . new ( self . data , keypath , value , self . __separator ) delete ( self , keypath ) Delete key/value located at keypath. Source code in compendium/settings.py 124 125 126 def delete ( self , keypath : str ) -> None : '''Delete key/value located at keypath.''' dpath . delete ( self . data , keypath , self . __separator ) get ( self , query , default = None , document = None ) Get value from settings with key. Source code in compendium/settings.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def get ( self , query : str , default : Optional [ Any ] = None , document : Optional [ Dict [ Any , Any ]] = None , ): '''Get value from settings with key.''' if not document : document = self . data documents = [ self . __environs , document , self . __defaults ] for doc in documents : try : return dpath . get ( doc , query , self . __separator ) break except KeyError : pass return default load_environment ( self ) Load environment variables. Source code in compendium/settings.py 57 58 59 60 61 62 63 64 65 66 def load_environment ( self ) -> None : '''Load environment variables.''' # TODO: Change env key from '_' to dict path env = [ { k . replace ( self . prefix , '' ) . lower (): v } for k , v in os . environ . items () if k . startswith ( self . prefix ) ] if env != []: Settings . __environs = { 'env' : env } merge ( self , document = None ) Merge document. Source code in compendium/settings.py 128 129 130 def merge ( self , document : Optional [ Dict [ Any , Any ]] = None ): '''Merge document.''' dpath . merge ( self . data , document , flags = 2 ) retrieve ( self , query ) Retrieve value from settings with key. Source code in compendium/settings.py 93 94 95 96 97 98 def retrieve ( self , query : str ): '''Retrieve value from settings with key.''' if not self . __document : self . __document = self . data self . __document = dpath . get ( self . __document , query , self . __separator ) return self search ( self , query ) Search settings matching query. Source code in compendium/settings.py 100 101 102 def search ( self , query : str ) -> Dict [ Any , Any ]: '''Search settings matching query.''' return dpath . values ( self . data , query , self . __separator ) set ( self , keypath , value ) Update value located at keypath. Source code in compendium/settings.py 112 113 114 def set ( self , keypath : str , value : Any ) -> None : '''Update value located at keypath.''' dpath . set ( self . data , keypath , value , self . __separator )","title":"Settings"},{"location":"development/settings/#compendium.settings","text":"Provide settings modules.","title":"compendium.settings"},{"location":"development/settings/#compendium.settings.Settings","text":"Manage settings loaded from confiugrations.","title":"Settings"},{"location":"development/settings/#compendium.settings.Settings.defaults","text":"Return default settings.","title":"defaults"},{"location":"development/settings/#compendium.settings.Settings.settings","text":"Return settings.","title":"settings"},{"location":"development/settings/#compendium.settings.Settings.__init__","text":"Initialize settings store. Source code in compendium/settings.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def __init__ ( self , application : str , ** kwargs ): '''Initialize settings store.''' self . application = application self . __document : Dict [ Any , Any ] = {} if 'defaults' in kwargs and Settings . __defaults == {}: Settings . __defaults = kwargs [ 'defaults' ] # Load settings from configs self . prefix = kwargs . get ( 'prefix' , \" {a} _\" . format ( a = application . upper ())) self . __separator : str = kwargs . pop ( 'separator' , '/' ) super () . __init__ ( ** kwargs ) print ( 'data' , self . data )","title":"__init__()"},{"location":"development/settings/#compendium.settings.Settings.__repr__","text":"Get string representaion. Source code in compendium/settings.py 36 37 38 def __repr__ ( self ) -> str : '''Get string representaion.''' return f \" { self . data } \"","title":"__repr__()"},{"location":"development/settings/#compendium.settings.Settings.add","text":"Add key/value pair located at keypath. Source code in compendium/settings.py 116 117 118 def add ( self , keypath : str , value : Any ) -> None : '''Add key/value pair located at keypath.''' dpath . new ( self . data , keypath , value , self . __separator )","title":"add()"},{"location":"development/settings/#compendium.settings.Settings.append","text":"Append to a list located at keypath. Source code in compendium/settings.py 104 105 106 107 108 109 110 def append ( self , keypath : str , value : Any ) -> None : '''Append to a list located at keypath.''' store = [ value ] keypath_dir = keypath . split ( self . __separator )[ 1 :] for x in reversed ( keypath_dir ): store = { x : store } # type: ignore dpath . merge ( self . data , store )","title":"append()"},{"location":"development/settings/#compendium.settings.Settings.create","text":"Create new key/value pair located at path. Source code in compendium/settings.py 120 121 122 def create ( self , keypath : str , value : Any ) -> None : '''Create new key/value pair located at path.''' dpath . new ( self . data , keypath , value , self . __separator )","title":"create()"},{"location":"development/settings/#compendium.settings.Settings.delete","text":"Delete key/value located at keypath. Source code in compendium/settings.py 124 125 126 def delete ( self , keypath : str ) -> None : '''Delete key/value located at keypath.''' dpath . delete ( self . data , keypath , self . __separator )","title":"delete()"},{"location":"development/settings/#compendium.settings.Settings.get","text":"Get value from settings with key. Source code in compendium/settings.py 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 def get ( self , query : str , default : Optional [ Any ] = None , document : Optional [ Dict [ Any , Any ]] = None , ): '''Get value from settings with key.''' if not document : document = self . data documents = [ self . __environs , document , self . __defaults ] for doc in documents : try : return dpath . get ( doc , query , self . __separator ) break except KeyError : pass return default","title":"get()"},{"location":"development/settings/#compendium.settings.Settings.load_environment","text":"Load environment variables. Source code in compendium/settings.py 57 58 59 60 61 62 63 64 65 66 def load_environment ( self ) -> None : '''Load environment variables.''' # TODO: Change env key from '_' to dict path env = [ { k . replace ( self . prefix , '' ) . lower (): v } for k , v in os . environ . items () if k . startswith ( self . prefix ) ] if env != []: Settings . __environs = { 'env' : env }","title":"load_environment()"},{"location":"development/settings/#compendium.settings.Settings.merge","text":"Merge document. Source code in compendium/settings.py 128 129 130 def merge ( self , document : Optional [ Dict [ Any , Any ]] = None ): '''Merge document.''' dpath . merge ( self . data , document , flags = 2 )","title":"merge()"},{"location":"development/settings/#compendium.settings.Settings.retrieve","text":"Retrieve value from settings with key. Source code in compendium/settings.py 93 94 95 96 97 98 def retrieve ( self , query : str ): '''Retrieve value from settings with key.''' if not self . __document : self . __document = self . data self . __document = dpath . get ( self . __document , query , self . __separator ) return self","title":"retrieve()"},{"location":"development/settings/#compendium.settings.Settings.search","text":"Search settings matching query. Source code in compendium/settings.py 100 101 102 def search ( self , query : str ) -> Dict [ Any , Any ]: '''Search settings matching query.''' return dpath . values ( self . data , query , self . __separator )","title":"search()"},{"location":"development/settings/#compendium.settings.Settings.set","text":"Update value located at keypath. Source code in compendium/settings.py 112 113 114 def set ( self , keypath : str , value : Any ) -> None : '''Update value located at keypath.''' dpath . set ( self . data , keypath , value , self . __separator )","title":"set()"},{"location":"development/filetypes/json/","text":"Control JSON module. JsonConfig Manage JSON configurations. __init__ ( self , ** kwargs ) special Initialize JSON configuration module. Source code in compendium/config/filetypes/json.py 18 19 20 21 22 def __init__ ( self , ** kwargs ): '''Initialize JSON configuration module.''' logging . info ( 'Inializing JsonConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . encoder = kwargs . get ( 'encoder' , str ) dump_config ( self , content , filepath ) Save settings to JSON configuration. Source code in compendium/config/filetypes/json.py 39 40 41 42 43 44 45 46 47 48 49 50 51 def dump_config ( self , content , filepath ): '''Save settings to JSON configuration.''' try : with open ( filepath , 'w' ) as f : json . dump ( content , f , indent = 2 , sort_keys = True , default = self . encoder ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise filetypes () staticmethod Return support JSON filetypes. Source code in compendium/config/filetypes/json.py 24 25 26 27 @staticmethod def filetypes (): '''Return support JSON filetypes.''' return [ 'json' ] load_config ( self , filepath ) Load settings from JSON configuration. Source code in compendium/config/filetypes/json.py 29 30 31 32 33 34 35 36 37 def load_config ( self , filepath ): '''Load settings from JSON configuration.''' logging . info ( 'loading JSON configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = json . load ( f ) else : content = {} return content","title":"Json"},{"location":"development/filetypes/json/#compendium.config.filetypes.json","text":"Control JSON module.","title":"compendium.config.filetypes.json"},{"location":"development/filetypes/json/#compendium.config.filetypes.json.JsonConfig","text":"Manage JSON configurations.","title":"JsonConfig"},{"location":"development/filetypes/json/#compendium.config.filetypes.json.JsonConfig.__init__","text":"Initialize JSON configuration module. Source code in compendium/config/filetypes/json.py 18 19 20 21 22 def __init__ ( self , ** kwargs ): '''Initialize JSON configuration module.''' logging . info ( 'Inializing JsonConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . encoder = kwargs . get ( 'encoder' , str )","title":"__init__()"},{"location":"development/filetypes/json/#compendium.config.filetypes.json.JsonConfig.dump_config","text":"Save settings to JSON configuration. Source code in compendium/config/filetypes/json.py 39 40 41 42 43 44 45 46 47 48 49 50 51 def dump_config ( self , content , filepath ): '''Save settings to JSON configuration.''' try : with open ( filepath , 'w' ) as f : json . dump ( content , f , indent = 2 , sort_keys = True , default = self . encoder ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise","title":"dump_config()"},{"location":"development/filetypes/json/#compendium.config.filetypes.json.JsonConfig.filetypes","text":"Return support JSON filetypes. Source code in compendium/config/filetypes/json.py 24 25 26 27 @staticmethod def filetypes (): '''Return support JSON filetypes.''' return [ 'json' ]","title":"filetypes()"},{"location":"development/filetypes/json/#compendium.config.filetypes.json.JsonConfig.load_config","text":"Load settings from JSON configuration. Source code in compendium/config/filetypes/json.py 29 30 31 32 33 34 35 36 37 def load_config ( self , filepath ): '''Load settings from JSON configuration.''' logging . info ( 'loading JSON configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = json . load ( f ) else : content = {} return content","title":"load_config()"},{"location":"development/filetypes/toml/","text":"Control toml module. TomlConfig Manage toml configurations. __init__ ( self , ** kwargs ) special Initialize toml module. Source code in compendium/config/filetypes/toml.py 18 19 20 21 def __init__ ( self , ** kwargs ): '''Initialize toml module.''' logging . info ( 'Inializing TomlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) dump_config ( self , content , filepath ) Save settings to toml configuration. Source code in compendium/config/filetypes/toml.py 40 41 42 43 44 45 46 47 48 49 50 51 def dump_config ( self , content , filepath ): '''Save settings to toml configuration.''' logging . info ( 'TomlConfig: saving configuration file' ) try : with open ( filepath , 'w' ) as f : f . write ( tomlkit . dumps ( content )) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise filetypes () staticmethod Return supported filetypes. Source code in compendium/config/filetypes/toml.py 23 24 25 26 27 28 @staticmethod def filetypes (): '''Return supported filetypes.''' return [ 'cfg' , 'conf' , 'config' , 'cnf' , 'ini' , 'toml' , 'tml' ] load_config ( self , filepath ) Load settings from toml configuration. Source code in compendium/config/filetypes/toml.py 30 31 32 33 34 35 36 37 38 def load_config ( self , filepath ): '''Load settings from toml configuration.''' logging . info ( 'loading TOML configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = tomlkit . parse ( f . read ()) else : content = {} return content","title":"Toml"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml","text":"Control toml module.","title":"compendium.config.filetypes.toml"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml.TomlConfig","text":"Manage toml configurations.","title":"TomlConfig"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml.TomlConfig.__init__","text":"Initialize toml module. Source code in compendium/config/filetypes/toml.py 18 19 20 21 def __init__ ( self , ** kwargs ): '''Initialize toml module.''' logging . info ( 'Inializing TomlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' )","title":"__init__()"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml.TomlConfig.dump_config","text":"Save settings to toml configuration. Source code in compendium/config/filetypes/toml.py 40 41 42 43 44 45 46 47 48 49 50 51 def dump_config ( self , content , filepath ): '''Save settings to toml configuration.''' logging . info ( 'TomlConfig: saving configuration file' ) try : with open ( filepath , 'w' ) as f : f . write ( tomlkit . dumps ( content )) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise","title":"dump_config()"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml.TomlConfig.filetypes","text":"Return supported filetypes. Source code in compendium/config/filetypes/toml.py 23 24 25 26 27 28 @staticmethod def filetypes (): '''Return supported filetypes.''' return [ 'cfg' , 'conf' , 'config' , 'cnf' , 'ini' , 'toml' , 'tml' ]","title":"filetypes()"},{"location":"development/filetypes/toml/#compendium.config.filetypes.toml.TomlConfig.load_config","text":"Load settings from toml configuration. Source code in compendium/config/filetypes/toml.py 30 31 32 33 34 35 36 37 38 def load_config ( self , filepath ): '''Load settings from toml configuration.''' logging . info ( 'loading TOML configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = tomlkit . parse ( f . read ()) else : content = {} return content","title":"load_config()"},{"location":"development/filetypes/xml/","text":"Control XML module. XmlConfig Manage XML configurations. __init__ ( self , ** kwargs ) special Initialize XML configuration module. Source code in compendium/config/filetypes/xml.py 18 19 20 21 22 23 24 def __init__ ( self , ** kwargs ): '''Initialize XML configuration module.''' logging . info ( 'Inializing XmlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . encoder = kwargs . get ( 'encoder' , str ) self . process_namespaces = kwargs . get ( 'process_namespaces' , False ) self . namespaces = kwargs . get ( 'namespaces' , None ) dump_config ( self , content , filepath ) Save settings to XML configuration. Source code in compendium/config/filetypes/xml.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def dump_config ( self , content , filepath ): '''Save settings to XML configuration.''' try : with open ( filepath , 'w' ) as f : f . write ( xmltodict . unparse ( content , encoding = self . encoding , pretty = True ) ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise filetypes () staticmethod Return supported XML configuration filetypes. Source code in compendium/config/filetypes/xml.py 26 27 28 29 @staticmethod def filetypes (): '''Return supported XML configuration filetypes.''' return [ 'xml' ] load_config ( self , filepath ) Load settings from XML configuration. Source code in compendium/config/filetypes/xml.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def load_config ( self , filepath ): '''Load settings from XML configuration.''' logging . info ( 'loading XML configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' ) as f : content = xmltodict . parse ( f . read (), encoding = self . encoding , process_namespaces = self . process_namespaces , namespaces = self . namespaces ) else : content = {} return content","title":"Xml"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml","text":"Control XML module.","title":"compendium.config.filetypes.xml"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml.XmlConfig","text":"Manage XML configurations.","title":"XmlConfig"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml.XmlConfig.__init__","text":"Initialize XML configuration module. Source code in compendium/config/filetypes/xml.py 18 19 20 21 22 23 24 def __init__ ( self , ** kwargs ): '''Initialize XML configuration module.''' logging . info ( 'Inializing XmlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . encoder = kwargs . get ( 'encoder' , str ) self . process_namespaces = kwargs . get ( 'process_namespaces' , False ) self . namespaces = kwargs . get ( 'namespaces' , None )","title":"__init__()"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml.XmlConfig.dump_config","text":"Save settings to XML configuration. Source code in compendium/config/filetypes/xml.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 def dump_config ( self , content , filepath ): '''Save settings to XML configuration.''' try : with open ( filepath , 'w' ) as f : f . write ( xmltodict . unparse ( content , encoding = self . encoding , pretty = True ) ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise","title":"dump_config()"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml.XmlConfig.filetypes","text":"Return supported XML configuration filetypes. Source code in compendium/config/filetypes/xml.py 26 27 28 29 @staticmethod def filetypes (): '''Return supported XML configuration filetypes.''' return [ 'xml' ]","title":"filetypes()"},{"location":"development/filetypes/xml/#compendium.config.filetypes.xml.XmlConfig.load_config","text":"Load settings from XML configuration. Source code in compendium/config/filetypes/xml.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def load_config ( self , filepath ): '''Load settings from XML configuration.''' logging . info ( 'loading XML configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' ) as f : content = xmltodict . parse ( f . read (), encoding = self . encoding , process_namespaces = self . process_namespaces , namespaces = self . namespaces ) else : content = {} return content","title":"load_config()"},{"location":"development/filetypes/yaml/","text":"Control YAML configuration module. YamlConfig Manage YAML configuration files. __init__ ( self , ** kwargs ) special Initialize YAML configuration module. Source code in compendium/config/filetypes/yaml.py 18 19 20 21 22 def __init__ ( self , ** kwargs ): '''Initialize YAML configuration module.''' logging . info ( 'Inializing YamlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . yaml = YAML ( typ = 'safe' ) dump_config ( self , content , filepath ) Save settings to YAML configuration. Source code in compendium/config/filetypes/yaml.py 41 42 43 44 45 46 47 48 49 50 51 def dump_config ( self , content , filepath ): '''Save settings to YAML configuration.''' try : with open ( filepath , 'w' ) as f : self . yaml . dump ( content , f ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise filetypes () staticmethod Return support YAML filetypes. Source code in compendium/config/filetypes/yaml.py 24 25 26 27 @staticmethod def filetypes (): '''Return support YAML filetypes.''' return [ 'yaml' , 'yml' ] load_config ( self , filepath ) Load settings from YAML configuration. Source code in compendium/config/filetypes/yaml.py 29 30 31 32 33 34 35 36 37 38 39 def load_config ( self , filepath ): '''Load settings from YAML configuration.''' logging . info ( \"loading YAML configuration file {} \" . format ( filepath ) ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = self . yaml . load ( f ) else : content = {} return content","title":"Yaml"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml","text":"Control YAML configuration module.","title":"compendium.config.filetypes.yaml"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml.YamlConfig","text":"Manage YAML configuration files.","title":"YamlConfig"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml.YamlConfig.__init__","text":"Initialize YAML configuration module. Source code in compendium/config/filetypes/yaml.py 18 19 20 21 22 def __init__ ( self , ** kwargs ): '''Initialize YAML configuration module.''' logging . info ( 'Inializing YamlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . yaml = YAML ( typ = 'safe' )","title":"__init__()"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml.YamlConfig.dump_config","text":"Save settings to YAML configuration. Source code in compendium/config/filetypes/yaml.py 41 42 43 44 45 46 47 48 49 50 51 def dump_config ( self , content , filepath ): '''Save settings to YAML configuration.''' try : with open ( filepath , 'w' ) as f : self . yaml . dump ( content , f ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise","title":"dump_config()"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml.YamlConfig.filetypes","text":"Return support YAML filetypes. Source code in compendium/config/filetypes/yaml.py 24 25 26 27 @staticmethod def filetypes (): '''Return support YAML filetypes.''' return [ 'yaml' , 'yml' ]","title":"filetypes()"},{"location":"development/filetypes/yaml/#compendium.config.filetypes.yaml.YamlConfig.load_config","text":"Load settings from YAML configuration. Source code in compendium/config/filetypes/yaml.py 29 30 31 32 33 34 35 36 37 38 39 def load_config ( self , filepath ): '''Load settings from YAML configuration.''' logging . info ( \"loading YAML configuration file {} \" . format ( filepath ) ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = self . yaml . load ( f ) else : content = {} return content","title":"load_config()"}]}