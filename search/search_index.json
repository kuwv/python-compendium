{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Compendium This website provides the project documentation for Python Compendium. Overview Compendium is a configuration management tool. Features Configurations Configuration Manager Hierarchical Configuration Manager Tree Configuration Manager Filetypes: JSON support INI support TOML support XML support YAML support Extensible Install pip install compendium","title":"Welcome to Compendium"},{"location":"#welcome-to-compendium","text":"This website provides the project documentation for Python Compendium.","title":"Welcome to Compendium"},{"location":"#overview","text":"Compendium is a configuration management tool.","title":"Overview"},{"location":"#features","text":"Configurations Configuration Manager Hierarchical Configuration Manager Tree Configuration Manager Filetypes: JSON support INI support TOML support XML support YAML support Extensible","title":"Features"},{"location":"#install","text":"pip install compendium","title":"Install"},{"location":"configuration/","text":"Configuration Manager should optionaly use repo pattern should save configs as different types ConfigManager: The ConfigManager is a simple configuration manager that loads a single configuration at a time. merge_strategy: None merge_sections: [] writable: False TreeConfigManager: The TreeConfigManager is a configuration manager for configurations nested within structured directory layout. This can be conceptualized as Maven like nested-pom configurations HierarchyConfigManager: The HierarchyConfigManager is a configuration manager that can be used to manager configurations. It is intended for system using Hierarchical File System (HFS). enable_system_paths: False enable_user_paths: False enable_local_paths: True","title":"Configuration Manager"},{"location":"configuration/#configuration-manager","text":"should optionaly use repo pattern should save configs as different types","title":"Configuration Manager"},{"location":"configuration/#configmanager","text":"The ConfigManager is a simple configuration manager that loads a single configuration at a time. merge_strategy: None merge_sections: [] writable: False","title":"ConfigManager:"},{"location":"configuration/#treeconfigmanager","text":"The TreeConfigManager is a configuration manager for configurations nested within structured directory layout. This can be conceptualized as Maven like nested-pom configurations","title":"TreeConfigManager:"},{"location":"configuration/#hierarchyconfigmanager","text":"The HierarchyConfigManager is a configuration manager that can be used to manager configurations. It is intended for system using Hierarchical File System (HFS). enable_system_paths: False enable_user_paths: False enable_local_paths: True","title":"HierarchyConfigManager:"},{"location":"schema/","text":"dictclasses Pydantic Marshmallow","title":"Schema"},{"location":"schema/#dictclasses","text":"","title":"dictclasses"},{"location":"schema/#pydantic","text":"","title":"Pydantic"},{"location":"schema/#marshmallow","text":"","title":"Marshmallow"},{"location":"settings/","text":"Settings Configuration Layers Layers: Environment Variables Configuration Files Default Configurations Environment Variables Environment variables are variables provided by the current shell. Variables provided this way are loaded once on startup and are read-only. These settings are the first queried for entries. Configuration Files Configuration files are the primary storage type for settings. These file can either be user or system configuration files. The last configuration file found is one loaded. This file may optionally read-only or writable. Defaults Defaults are settings loaded from a selected configuration file. This configuration is a read only file. Settings provided by defaults are the last settings searched for entries before an error is thrown. Configuring Settings Manager name - Name of the name instance. path - Path to the configuration files. separator - Character used to separate search paths within search. prefix - Prefix used to pull environment variables from others. Managing Settings from compendium.settings import Settings cfg = Settings(name='app', path='afile.toml') cfg.load() Searching Data Getting settings cfg.get('/servers/**/ip') Search settings query = cfg.search('/servers/**/ip') Adding Settings Create settings cfg.create('/test', 'test') Update settings cfg.update('/owner/name', 'Tom Waits') Remove Settings Delete settings cfg.delete('/owner/name')","title":"Settings"},{"location":"settings/#settings","text":"","title":"Settings"},{"location":"settings/#configuration-layers","text":"Layers: Environment Variables Configuration Files Default Configurations","title":"Configuration Layers"},{"location":"settings/#environment-variables","text":"Environment variables are variables provided by the current shell. Variables provided this way are loaded once on startup and are read-only. These settings are the first queried for entries.","title":"Environment Variables"},{"location":"settings/#configuration-files","text":"Configuration files are the primary storage type for settings. These file can either be user or system configuration files. The last configuration file found is one loaded. This file may optionally read-only or writable.","title":"Configuration Files"},{"location":"settings/#defaults","text":"Defaults are settings loaded from a selected configuration file. This configuration is a read only file. Settings provided by defaults are the last settings searched for entries before an error is thrown.","title":"Defaults"},{"location":"settings/#configuring-settings-manager","text":"name - Name of the name instance. path - Path to the configuration files. separator - Character used to separate search paths within search. prefix - Prefix used to pull environment variables from others.","title":"Configuring Settings Manager"},{"location":"settings/#managing-settings","text":"from compendium.settings import Settings cfg = Settings(name='app', path='afile.toml') cfg.load()","title":"Managing Settings"},{"location":"settings/#searching-data","text":"","title":"Searching Data"},{"location":"settings/#getting-settings","text":"cfg.get('/servers/**/ip')","title":"Getting settings"},{"location":"settings/#search-settings","text":"query = cfg.search('/servers/**/ip')","title":"Search settings"},{"location":"settings/#adding-settings","text":"","title":"Adding Settings"},{"location":"settings/#create-settings","text":"cfg.create('/test', 'test')","title":"Create settings"},{"location":"settings/#update-settings","text":"cfg.update('/owner/name', 'Tom Waits')","title":"Update settings"},{"location":"settings/#remove-settings","text":"","title":"Remove Settings"},{"location":"settings/#delete-settings","text":"cfg.delete('/owner/name')","title":"Delete settings"},{"location":"development/config_manager/","text":"Provide settings modules. ConfigManager Provide config management representation. defaults property readonly Get configuration defaults. filepaths: Tuple [ str , ... ] property readonly Retrieve filepaths. settings: SettingsMap property readonly Create settings to prototype idea. __getattr__ ( self , attr ) special Proxy calls to settings store. Source code in compendium/config_manager.py 72 73 74 75 76 77 78 79 80 81 82 83 def __getattr__ ( self , attr : str ) -> Callable [[ VarArg ( Any ), KwArg ( Any )], Any ]: '''Proxy calls to settings store.''' if hasattr ( self . __dict__ . get ( 'data' ), attr ): def wrapper ( * args , ** kwargs ): '''Call query for data store.''' return getattr ( self . data , attr )( * args , ** kwargs ) return wrapper raise AttributeError ( attr ) __init__ ( self , name , * args , ** kwargs ) special Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last Source code in compendium/config_manager.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def __init__ ( self , name : str , * args : str , ** kwargs : Any ) -> None : '''Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last ''' # Setup logging if 'log_level' in kwargs : log . setLevel ( getattr ( logging , kwargs . pop ( 'log_level' ) . upper ())) if 'log_handler' in kwargs : log_handler = kwargs . pop ( 'log_handler' ) log . addHandler ( logging . StreamHandler ( log_handler )) # type: ignore # Setup filepaths self . name = name # TODO: args should be filepaths self . _filepaths : List [ str ] = list ( args ) # self.config_files: List[Dict[str, Union[str, ConfigFile]]] = [] # Load environs if 'prefix' in kwargs : self . prefix = kwargs . pop ( 'prefix' ) if 'separator' in kwargs : self . separator = kwargs . pop ( 'separator' ) if kwargs . pop ( 'load_dotenv' , False ): self . load_dotenv () if kwargs . pop ( 'load_environs' , True ): self . environs = self . load_environs () # if kwargs.pop('load_startup_args', True): # self.environs.update(kwargs.pop('load_startup_args', {})) # Load defaults defaults = kwargs . pop ( 'defaults' , {}) # Populate settings if 'data' in kwargs : self . data = SettingsMap ( * kwargs . pop ( 'data' )) if defaults != {}: self . defaults . update ( defaults ) else : self . data = SettingsMap ( defaults ) __repr__ ( self ) special Get string representation of data. Source code in compendium/config_manager.py 85 86 87 def __repr__ ( self ) -> str : '''Get string representation of data.''' return repr ( self . data ) add_filepath ( self , filepath ) Load settings from configuration in filepath. Source code in compendium/config_manager.py 109 110 111 112 def add_filepath ( self , filepath : str ) -> None : '''Load settings from configuration in filepath.''' logging . debug ( \"searching for {} \" . format ( filepath )) self . _filepaths . append ( filepath ) load_config ( self , filepath , update = True ) Load settings from configuration. Source code in compendium/config_manager.py 122 123 124 125 126 127 128 129 130 131 132 def load_config ( self , filepath : str , update : bool = True ) -> Optional [ ConfigFile ]: '''Load settings from configuration.''' if os . path . exists ( filepath ): config_file = ConfigFile ( filepath = filepath ) config_file . load () if update : self . data . push ( config_file ) return config_file return None load_configs ( self ) Load configuration files from filepaths. Source code in compendium/config_manager.py 134 135 136 137 def load_configs ( self ) -> None : '''Load configuration files from filepaths.''' for filepath in self . _filepaths : self . load_config ( filepath ) HierarchyConfigManager Manage settings from hierarchy config_files. __init__ ( self , name , * args , ** kwargs ) special Initialize settings from hirarchy filepaths. Parameters str Name of name. list, optional Include sections to be merged list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded bool, optional Enable system filepath lookup for config_files. bool, optional Enable user filepath lookup for config_files. bool, optional Enable local filepath lookup for config_files. Source code in compendium/config_manager.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def __init__ ( self , name : str , * args : str , ** kwargs : Any ) -> None : '''Initialize settings from hirarchy filepaths. Parameters ---------- name: str Name of name. merge_sections: list, optional Include sections to be merged merge_strategy: list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded enable_system_filepaths: bool, optional Enable system filepath lookup for config_files. enable_global_filepaths: bool, optional Enable user filepath lookup for config_files. enable_local_filepaths: bool, optional Enable local filepath lookup for config_files. ''' self . basedir = kwargs . pop ( 'basedir' , os . sep ) self . filename = kwargs . pop ( 'filename' , 'config.toml' ) self . enable_system_filepaths = bool ( kwargs . get ( 'enable_system_filepaths' , False ) ) self . enable_global_filepaths = bool ( kwargs . get ( 'enable_global_filepaths' , False ) ) self . enable_local_filepaths = bool ( kwargs . get ( 'enable_local_filepaths' , True ) ) super () . __init__ ( name , * args , ** kwargs ) self . _prep_filepaths () TreeConfigManager Manage settings from nested tree config_files. namepaths: Tuple [ str , ... ] property readonly Return list of namepaths. __init__ ( self , name , * args , ** kwargs ) special Initialize nested settings management. Source code in compendium/config_manager.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 def __init__ ( self , name : str , * args : str , ** kwargs : Any ) -> None : '''Initialize nested settings management.''' self . parent = kwargs . pop ( 'parent' , None ) if 'children' in kwargs : self . children = kwargs . pop ( 'children' ) load_root = kwargs . pop ( 'load_root' , False ) load_children = kwargs . pop ( 'load_children' , False ) self . filename = kwargs . pop ( 'filename' , 'config.toml' ) self . basedir = kwargs . pop ( 'basedir' , os . getcwd ()) super () . __init__ ( name , * args , ** kwargs ) if not self . parent and args == (): self . _prep_filepaths () else : self . _filepaths == list ( args ) if load_root : super () . load_config ( self . filepaths [ 0 ]) if load_children : self . load_configs () get_config ( self , namepath ) Get config from store by attribute. Source code in compendium/config_manager.py 255 256 257 258 259 def get_config ( self , namepath ): '''Get config from store by attribute.''' r = Resolver ( 'name' ) results = r . get ( self , namepath ) return results get_filepath ( self , name ) Get filepath from namepath. Source code in compendium/config_manager.py 248 249 250 251 252 253 def get_filepath ( self , name : str ) -> Optional [ str ]: '''Get filepath from namepath.''' for x in self . filepaths : if name == self . get_namepath ( x ): return x return None get_name ( self , filepath ) Get name from tree path. Source code in compendium/config_manager.py 228 229 230 231 232 233 234 235 236 def get_name ( self , filepath : str ) -> str : '''Get name from tree path.''' name = os . path . dirname ( os . path . relpath ( filepath , self . basedir ),) . split ( os . sep )[ - 1 ] if name != '' : return name else : return self . name get_namepath ( self , filepath ) Get name from tree path. Source code in compendium/config_manager.py 238 239 240 241 242 243 244 245 246 def get_namepath ( self , filepath : str ) -> str : '''Get name from tree path.''' name = os . path . dirname ( os . path . relpath ( filepath , self . basedir ), ) . replace ( os . sep , self . separator ) if name != '' : return f \" { self . separator }{ self . name }{ self . separator }{ name } \" else : return f \" { self . separator }{ self . name } \" load_config ( self , filepath , update = False , * args , ** kwargs ) Load config. Source code in compendium/config_manager.py 303 304 305 306 307 308 309 310 def load_config ( self , filepath : str , update : bool = False , * args : str , ** kwargs : Any ) -> Optional [ ConfigFile ]: '''Load config.''' config_file = super () . load_config ( filepath , update ) return self . new_child ( self . get_name ( filepath ), data = config_file , * args , ** kwargs ) load_configs ( self ) Load configuration files from filepaths. Source code in compendium/config_manager.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 def load_configs ( self ) -> None : '''Load configuration files from filepaths.''' def get_child_paths ( namepath : str ): '''Get relative child paths of namepath.''' child_paths = [] for path in self . filepaths [ 1 :]: child_path = os . path . dirname ( os . path . relpath ( path , self . basedir ) ) if len ( child_path . split ( os . sep )) > 1 and child_path . startswith ( namepath ): child_paths . append ( path ) return child_paths if self . children == (): # get children filepaths for parent filepaths = self . filepaths if self . parent else self . filepaths [ 1 :] for x in filepaths : namepath = os . path . dirname ( os . path . relpath ( x , self . basedir )) # print('---', self.name, namepath, self.parent) if len ( namepath . split ( os . sep )) == 1 : child_paths = get_child_paths ( namepath ) children = list ( self . children ) children . append ( self . load_config ( x , False , * child_paths , basedir = f \" { self . basedir }{ os . sep }{ namepath } \" , ) ) self . children = children else : raise exceptions . CompendiumConfigManagerError ( 'children configurations already loaded' ) new_child ( self , name , * args , ** kwargs ) Get child config node. Source code in compendium/config_manager.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 def new_child ( self , name : str , * args : str , ** kwargs : Any ) -> 'TreeConfigManager' : '''Get child config node.''' if 'basedir' not in kwargs : kwargs [ 'basedir' ] = self . basedir if 'filename' not in kwargs : kwargs [ 'filename' ] = self . filename kwargs [ 'parent' ] = self # ( # self.get_config( # self.get_namepath(filepath).rsplit(self.separator, 1)[0] # ) # ) data = self . data . maps # filepath = ( # kwargs.pop('filepath', None) # or self.get_filepath( # f\"{self.separator}{self.name}{self.separator}{name}\" # ) # ) # if filepath is not None: # config_file = self.load_config(filepath) # if config_file is not None: # data = [config_file] + data # type: ignore if 'data' in kwargs and kwargs [ 'data' ] not in self . data . maps : data = [ kwargs . pop ( 'data' )] + data kwargs [ 'data' ] = data kwargs [ 'load_children' ] = True return self . __class__ ( name , * args , ** kwargs )","title":"Config Manager"},{"location":"development/config_manager/#compendium.config_manager","text":"Provide settings modules.","title":"compendium.config_manager"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager","text":"Provide config management representation.","title":"ConfigManager"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.defaults","text":"Get configuration defaults.","title":"defaults"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.filepaths","text":"Retrieve filepaths.","title":"filepaths"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.settings","text":"Create settings to prototype idea.","title":"settings"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.__getattr__","text":"Proxy calls to settings store. Source code in compendium/config_manager.py 72 73 74 75 76 77 78 79 80 81 82 83 def __getattr__ ( self , attr : str ) -> Callable [[ VarArg ( Any ), KwArg ( Any )], Any ]: '''Proxy calls to settings store.''' if hasattr ( self . __dict__ . get ( 'data' ), attr ): def wrapper ( * args , ** kwargs ): '''Call query for data store.''' return getattr ( self . data , attr )( * args , ** kwargs ) return wrapper raise AttributeError ( attr )","title":"__getattr__()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.__init__","text":"Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last Source code in compendium/config_manager.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 def __init__ ( self , name : str , * args : str , ** kwargs : Any ) -> None : '''Initialize single settings management. merge_sections: [] merge_strategy: - overlay - partition - last ''' # Setup logging if 'log_level' in kwargs : log . setLevel ( getattr ( logging , kwargs . pop ( 'log_level' ) . upper ())) if 'log_handler' in kwargs : log_handler = kwargs . pop ( 'log_handler' ) log . addHandler ( logging . StreamHandler ( log_handler )) # type: ignore # Setup filepaths self . name = name # TODO: args should be filepaths self . _filepaths : List [ str ] = list ( args ) # self.config_files: List[Dict[str, Union[str, ConfigFile]]] = [] # Load environs if 'prefix' in kwargs : self . prefix = kwargs . pop ( 'prefix' ) if 'separator' in kwargs : self . separator = kwargs . pop ( 'separator' ) if kwargs . pop ( 'load_dotenv' , False ): self . load_dotenv () if kwargs . pop ( 'load_environs' , True ): self . environs = self . load_environs () # if kwargs.pop('load_startup_args', True): # self.environs.update(kwargs.pop('load_startup_args', {})) # Load defaults defaults = kwargs . pop ( 'defaults' , {}) # Populate settings if 'data' in kwargs : self . data = SettingsMap ( * kwargs . pop ( 'data' )) if defaults != {}: self . defaults . update ( defaults ) else : self . data = SettingsMap ( defaults )","title":"__init__()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.__repr__","text":"Get string representation of data. Source code in compendium/config_manager.py 85 86 87 def __repr__ ( self ) -> str : '''Get string representation of data.''' return repr ( self . data )","title":"__repr__()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.add_filepath","text":"Load settings from configuration in filepath. Source code in compendium/config_manager.py 109 110 111 112 def add_filepath ( self , filepath : str ) -> None : '''Load settings from configuration in filepath.''' logging . debug ( \"searching for {} \" . format ( filepath )) self . _filepaths . append ( filepath )","title":"add_filepath()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.load_config","text":"Load settings from configuration. Source code in compendium/config_manager.py 122 123 124 125 126 127 128 129 130 131 132 def load_config ( self , filepath : str , update : bool = True ) -> Optional [ ConfigFile ]: '''Load settings from configuration.''' if os . path . exists ( filepath ): config_file = ConfigFile ( filepath = filepath ) config_file . load () if update : self . data . push ( config_file ) return config_file return None","title":"load_config()"},{"location":"development/config_manager/#compendium.config_manager.ConfigManager.load_configs","text":"Load configuration files from filepaths. Source code in compendium/config_manager.py 134 135 136 137 def load_configs ( self ) -> None : '''Load configuration files from filepaths.''' for filepath in self . _filepaths : self . load_config ( filepath )","title":"load_configs()"},{"location":"development/config_manager/#compendium.config_manager.HierarchyConfigManager","text":"Manage settings from hierarchy config_files.","title":"HierarchyConfigManager"},{"location":"development/config_manager/#compendium.config_manager.HierarchyConfigManager.__init__","text":"Initialize settings from hirarchy filepaths.","title":"__init__()"},{"location":"development/config_manager/#parameters","text":"str Name of name. list, optional Include sections to be merged list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded bool, optional Enable system filepath lookup for config_files. bool, optional Enable user filepath lookup for config_files. bool, optional Enable local filepath lookup for config_files. Source code in compendium/config_manager.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def __init__ ( self , name : str , * args : str , ** kwargs : Any ) -> None : '''Initialize settings from hirarchy filepaths. Parameters ---------- name: str Name of name. merge_sections: list, optional Include sections to be merged merge_strategy: list, optional Strategy to used when merging: overlay, parition, and last - overlay will replace exsisting entries - partition will keeps each seettings separate - last will only use the last loaded enable_system_filepaths: bool, optional Enable system filepath lookup for config_files. enable_global_filepaths: bool, optional Enable user filepath lookup for config_files. enable_local_filepaths: bool, optional Enable local filepath lookup for config_files. ''' self . basedir = kwargs . pop ( 'basedir' , os . sep ) self . filename = kwargs . pop ( 'filename' , 'config.toml' ) self . enable_system_filepaths = bool ( kwargs . get ( 'enable_system_filepaths' , False ) ) self . enable_global_filepaths = bool ( kwargs . get ( 'enable_global_filepaths' , False ) ) self . enable_local_filepaths = bool ( kwargs . get ( 'enable_local_filepaths' , True ) ) super () . __init__ ( name , * args , ** kwargs ) self . _prep_filepaths ()","title":"Parameters"},{"location":"development/config_manager/#compendium.config_manager.TreeConfigManager","text":"Manage settings from nested tree config_files.","title":"TreeConfigManager"},{"location":"development/config_manager/#compendium.config_manager.TreeConfigManager.namepaths","text":"Return list of namepaths.","title":"namepaths"},{"location":"development/config_manager/#compendium.config_manager.TreeConfigManager.__init__","text":"Initialize nested settings management. Source code in compendium/config_manager.py 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 def __init__ ( self , name : str , * args : str , ** kwargs : Any ) -> None : '''Initialize nested settings management.''' self . parent = kwargs . pop ( 'parent' , None ) if 'children' in kwargs : self . children = kwargs . pop ( 'children' ) load_root = kwargs . pop ( 'load_root' , False ) load_children = kwargs . pop ( 'load_children' , False ) self . filename = kwargs . pop ( 'filename' , 'config.toml' ) self . basedir = kwargs . pop ( 'basedir' , os . getcwd ()) super () . __init__ ( name , * args , ** kwargs ) if not self . parent and args == (): self . _prep_filepaths () else : self . _filepaths == list ( args ) if load_root : super () . load_config ( self . filepaths [ 0 ]) if load_children : self . load_configs ()","title":"__init__()"},{"location":"development/config_manager/#compendium.config_manager.TreeConfigManager.get_config","text":"Get config from store by attribute. Source code in compendium/config_manager.py 255 256 257 258 259 def get_config ( self , namepath ): '''Get config from store by attribute.''' r = Resolver ( 'name' ) results = r . get ( self , namepath ) return results","title":"get_config()"},{"location":"development/config_manager/#compendium.config_manager.TreeConfigManager.get_filepath","text":"Get filepath from namepath. Source code in compendium/config_manager.py 248 249 250 251 252 253 def get_filepath ( self , name : str ) -> Optional [ str ]: '''Get filepath from namepath.''' for x in self . filepaths : if name == self . get_namepath ( x ): return x return None","title":"get_filepath()"},{"location":"development/config_manager/#compendium.config_manager.TreeConfigManager.get_name","text":"Get name from tree path. Source code in compendium/config_manager.py 228 229 230 231 232 233 234 235 236 def get_name ( self , filepath : str ) -> str : '''Get name from tree path.''' name = os . path . dirname ( os . path . relpath ( filepath , self . basedir ),) . split ( os . sep )[ - 1 ] if name != '' : return name else : return self . name","title":"get_name()"},{"location":"development/config_manager/#compendium.config_manager.TreeConfigManager.get_namepath","text":"Get name from tree path. Source code in compendium/config_manager.py 238 239 240 241 242 243 244 245 246 def get_namepath ( self , filepath : str ) -> str : '''Get name from tree path.''' name = os . path . dirname ( os . path . relpath ( filepath , self . basedir ), ) . replace ( os . sep , self . separator ) if name != '' : return f \" { self . separator }{ self . name }{ self . separator }{ name } \" else : return f \" { self . separator }{ self . name } \"","title":"get_namepath()"},{"location":"development/config_manager/#compendium.config_manager.TreeConfigManager.load_config","text":"Load config. Source code in compendium/config_manager.py 303 304 305 306 307 308 309 310 def load_config ( self , filepath : str , update : bool = False , * args : str , ** kwargs : Any ) -> Optional [ ConfigFile ]: '''Load config.''' config_file = super () . load_config ( filepath , update ) return self . new_child ( self . get_name ( filepath ), data = config_file , * args , ** kwargs )","title":"load_config()"},{"location":"development/config_manager/#compendium.config_manager.TreeConfigManager.load_configs","text":"Load configuration files from filepaths. Source code in compendium/config_manager.py 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 def load_configs ( self ) -> None : '''Load configuration files from filepaths.''' def get_child_paths ( namepath : str ): '''Get relative child paths of namepath.''' child_paths = [] for path in self . filepaths [ 1 :]: child_path = os . path . dirname ( os . path . relpath ( path , self . basedir ) ) if len ( child_path . split ( os . sep )) > 1 and child_path . startswith ( namepath ): child_paths . append ( path ) return child_paths if self . children == (): # get children filepaths for parent filepaths = self . filepaths if self . parent else self . filepaths [ 1 :] for x in filepaths : namepath = os . path . dirname ( os . path . relpath ( x , self . basedir )) # print('---', self.name, namepath, self.parent) if len ( namepath . split ( os . sep )) == 1 : child_paths = get_child_paths ( namepath ) children = list ( self . children ) children . append ( self . load_config ( x , False , * child_paths , basedir = f \" { self . basedir }{ os . sep }{ namepath } \" , ) ) self . children = children else : raise exceptions . CompendiumConfigManagerError ( 'children configurations already loaded' )","title":"load_configs()"},{"location":"development/config_manager/#compendium.config_manager.TreeConfigManager.new_child","text":"Get child config node. Source code in compendium/config_manager.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 def new_child ( self , name : str , * args : str , ** kwargs : Any ) -> 'TreeConfigManager' : '''Get child config node.''' if 'basedir' not in kwargs : kwargs [ 'basedir' ] = self . basedir if 'filename' not in kwargs : kwargs [ 'filename' ] = self . filename kwargs [ 'parent' ] = self # ( # self.get_config( # self.get_namepath(filepath).rsplit(self.separator, 1)[0] # ) # ) data = self . data . maps # filepath = ( # kwargs.pop('filepath', None) # or self.get_filepath( # f\"{self.separator}{self.name}{self.separator}{name}\" # ) # ) # if filepath is not None: # config_file = self.load_config(filepath) # if config_file is not None: # data = [config_file] + data # type: ignore if 'data' in kwargs and kwargs [ 'data' ] not in self . data . maps : data = [ kwargs . pop ( 'data' )] + data kwargs [ 'data' ] = data kwargs [ 'load_children' ] = True return self . __class__ ( name , * args , ** kwargs )","title":"new_child()"},{"location":"development/filetypes_base/","text":"Provide plugin base for configuration modules. FiletypesBase Define required configuration module methods. dump_config ( self , content , filepath ) Save confgration to file. Source code in compendium/filetypes_base.py 19 20 21 @abstractmethod def dump_config ( self , content , filepath ): '''Save confgration to file.''' load_config ( self , filepath ) Load configuration from file. Source code in compendium/filetypes_base.py 15 16 17 @abstractmethod def load_config ( self , filepath ): '''Load configuration from file.'''","title":"Filetypes Base"},{"location":"development/filetypes_base/#compendium.filetypes_base","text":"Provide plugin base for configuration modules.","title":"compendium.filetypes_base"},{"location":"development/filetypes_base/#compendium.filetypes_base.FiletypesBase","text":"Define required configuration module methods.","title":"FiletypesBase"},{"location":"development/filetypes_base/#compendium.filetypes_base.FiletypesBase.dump_config","text":"Save confgration to file. Source code in compendium/filetypes_base.py 19 20 21 @abstractmethod def dump_config ( self , content , filepath ): '''Save confgration to file.'''","title":"dump_config()"},{"location":"development/filetypes_base/#compendium.filetypes_base.FiletypesBase.load_config","text":"Load configuration from file. Source code in compendium/filetypes_base.py 15 16 17 @abstractmethod def load_config ( self , filepath ): '''Load configuration from file.'''","title":"load_config()"},{"location":"development/loader/","text":"Control configuration files. ConfigFile Manage settings loaded from confiugrations using dpath. __init__ ( self , filepath = None , ** kwargs ) special Initialize single configuration file. Source code in compendium/loader.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def __init__ ( self , filepath : Optional [ str ] = None , ** kwargs : Any ) -> None : '''Initialize single configuration file.''' self . filepath : Optional [ str ] = filepath self . filename : str = kwargs . pop ( 'filename' , 'config.toml' ) self . filetype : str = kwargs . pop ( 'filetype' , self . get_filetype ( self . filename ) ) self . writable : bool = bool ( kwargs . pop ( 'writable' , False )) self . autosave : bool = bool ( kwargs . pop ( 'autosave' , True if self . writable else False ) ) if 'separator' in kwargs : self . separator : str = kwargs . pop ( 'separator' ) super () . __init__ ( ** kwargs ) dump ( self , filepath = None ) Save settings to configuraiton. Source code in compendium/loader.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def dump ( self , filepath : Optional [ str ] = None ) -> None : '''Save settings to configuraiton.''' if self . writable : filepath = filepath or self . filepath if filepath : # Use discovered module to save configuration logging . info ( \"Saving configuration: ' {} '\" . format ( filepath )) Class = self . __get_class ( self . get_filetype ( filepath ) or self . filetype ) if Class : # TODO: refactor to use respective dict from chainmap c = Class () c . dump_config ( self . data , filepath ) else : raise exceptions . CompendiumDriverError ( \"Skipping: No class found for: ' {} '\" . format ( filepath ) ) else : raise exceptions . CompendiumConfigFileError ( 'Error: no config file provided' ) else : raise exceptions . CompendiumConfigFileError ( 'Error: file is not writable' ) load ( self , filepath = None ) Load settings from configuration file. Source code in compendium/loader.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def load ( self , filepath : Optional [ str ] = None ) -> None : '''Load settings from configuration file.''' filepath = filepath or self . filepath if filepath : # Use discovered module to load configuration. if os . path . exists ( filepath ): logging . info ( \"Retrieving configuration: ' {} '\" . format ( filepath )) Class = self . __get_class ( self . get_filetype ( filepath ) or self . filetype ) if Class : c = Class () self . update ( c . load_config ( filepath = filepath )) else : raise exceptions . CompendiumDriverError ( \"Error: No class found for: ' {} '\" . format ( filepath ) ) else : raise exceptions . CompendiumConfigFileError ( \"Skipping: No configuration found at: ' {} '\" . format ( filepath ) ) else : raise exceptions . CompendiumConfigFileError ( 'Error: no config file provided' ) modules () staticmethod Lookup modules inheriting FiletypesBase. Source code in compendium/loader.py 50 51 52 53 @staticmethod def modules () -> Tuple [ Any , ... ]: '''Lookup modules inheriting FiletypesBase.''' return tuple ([ m for m in FiletypesBase . __subclasses__ ()])","title":"Loader"},{"location":"development/loader/#compendium.loader","text":"Control configuration files.","title":"compendium.loader"},{"location":"development/loader/#compendium.loader.ConfigFile","text":"Manage settings loaded from confiugrations using dpath.","title":"ConfigFile"},{"location":"development/loader/#compendium.loader.ConfigFile.__init__","text":"Initialize single configuration file. Source code in compendium/loader.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 def __init__ ( self , filepath : Optional [ str ] = None , ** kwargs : Any ) -> None : '''Initialize single configuration file.''' self . filepath : Optional [ str ] = filepath self . filename : str = kwargs . pop ( 'filename' , 'config.toml' ) self . filetype : str = kwargs . pop ( 'filetype' , self . get_filetype ( self . filename ) ) self . writable : bool = bool ( kwargs . pop ( 'writable' , False )) self . autosave : bool = bool ( kwargs . pop ( 'autosave' , True if self . writable else False ) ) if 'separator' in kwargs : self . separator : str = kwargs . pop ( 'separator' ) super () . __init__ ( ** kwargs )","title":"__init__()"},{"location":"development/loader/#compendium.loader.ConfigFile.dump","text":"Save settings to configuraiton. Source code in compendium/loader.py 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 def dump ( self , filepath : Optional [ str ] = None ) -> None : '''Save settings to configuraiton.''' if self . writable : filepath = filepath or self . filepath if filepath : # Use discovered module to save configuration logging . info ( \"Saving configuration: ' {} '\" . format ( filepath )) Class = self . __get_class ( self . get_filetype ( filepath ) or self . filetype ) if Class : # TODO: refactor to use respective dict from chainmap c = Class () c . dump_config ( self . data , filepath ) else : raise exceptions . CompendiumDriverError ( \"Skipping: No class found for: ' {} '\" . format ( filepath ) ) else : raise exceptions . CompendiumConfigFileError ( 'Error: no config file provided' ) else : raise exceptions . CompendiumConfigFileError ( 'Error: file is not writable' )","title":"dump()"},{"location":"development/loader/#compendium.loader.ConfigFile.load","text":"Load settings from configuration file. Source code in compendium/loader.py 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 def load ( self , filepath : Optional [ str ] = None ) -> None : '''Load settings from configuration file.''' filepath = filepath or self . filepath if filepath : # Use discovered module to load configuration. if os . path . exists ( filepath ): logging . info ( \"Retrieving configuration: ' {} '\" . format ( filepath )) Class = self . __get_class ( self . get_filetype ( filepath ) or self . filetype ) if Class : c = Class () self . update ( c . load_config ( filepath = filepath )) else : raise exceptions . CompendiumDriverError ( \"Error: No class found for: ' {} '\" . format ( filepath ) ) else : raise exceptions . CompendiumConfigFileError ( \"Skipping: No configuration found at: ' {} '\" . format ( filepath ) ) else : raise exceptions . CompendiumConfigFileError ( 'Error: no config file provided' )","title":"load()"},{"location":"development/loader/#compendium.loader.ConfigFile.modules","text":"Lookup modules inheriting FiletypesBase. Source code in compendium/loader.py 50 51 52 53 @staticmethod def modules () -> Tuple [ Any , ... ]: '''Lookup modules inheriting FiletypesBase.''' return tuple ([ m for m in FiletypesBase . __subclasses__ ()])","title":"modules()"},{"location":"development/paths/","text":"","title":"Paths"},{"location":"development/settings/","text":"Provide settings modules. EnvironsMixin Manage environment variables. prefix: str property writable Get environment prefix. load_dotenv () staticmethod Load environs from .env file. Source code in compendium/settings.py 58 59 60 61 62 63 64 65 66 67 @staticmethod def load_dotenv () -> None : '''Load environs from .env file.''' env_file = os . path . join ( os . getcwd (), '.env' ) # if self._check_filepath(env_file): if os . path . exists ( env_file ): with open ( env_file ) as env : for line in env : k , v = line . partition ( '=' )[:: 2 ] os . environ [ k . strip () . upper ()] = str ( v ) load_environs ( self , force = False ) Load environment variables. Source code in compendium/settings.py 69 70 71 72 73 74 75 76 def load_environs ( self , force : bool = False ) -> Dict [ str , Any ]: '''Load environment variables.''' prefix = str ( f \" { self . prefix } _\" if self . prefix != '' else self . prefix ) env : Dict [ str , Any ] = {} for k , v in os . environ . items (): if k . startswith ( prefix ): env = self . merge ( env , self . to_dict ( k . replace ( prefix , '' ), v ),) return env to_dict ( key , value ) staticmethod Convert environment key to dictionary. Source code in compendium/settings.py 45 46 47 48 49 50 51 52 53 54 55 56 @staticmethod def to_dict ( key : str , value : Any ) -> Dict [ str , Any ]: '''Convert environment key to dictionary.''' def expand ( x ): '''Convert key part to dictionary key.''' if '_' not in x : return { x : value } k , v = x . split ( '_' , 1 ) return { k : expand ( v )} return expand ( key . lower ()) MergeMixin Merge dictionaries. merge ( source , update ) classmethod Perform recursive merge. Source code in compendium/settings.py 18 19 20 21 22 23 24 25 26 @classmethod def merge ( self , source , update ): '''Perform recursive merge.''' for k , v in update . items (): if isinstance ( v , Mapping ): source [ k ] = self . merge ( source . get ( k , {}), v ) else : source [ k ] = v return source SettingsMap Manage settings loaded from confiugrations using dpath. __init__ ( self , * args , ** kwargs ) special Initialize settings store. Source code in compendium/settings.py 82 83 84 85 86 def __init__ ( self , * args , ** kwargs ): '''Initialize settings store.''' if 'separator' in kwargs : self . separator : str = kwargs . pop ( 'separator' ) super () . __init__ ( * args ) push ( self , settings ) Push settings untop store. Source code in compendium/settings.py 88 89 90 91 def push ( self , settings ) -> None : '''Push settings untop store.''' logging . debug ( settings ) self . maps . insert ( 0 , settings )","title":"Settings"},{"location":"development/settings/#compendium.settings","text":"Provide settings modules.","title":"compendium.settings"},{"location":"development/settings/#compendium.settings.EnvironsMixin","text":"Manage environment variables.","title":"EnvironsMixin"},{"location":"development/settings/#compendium.settings.EnvironsMixin.prefix","text":"Get environment prefix.","title":"prefix"},{"location":"development/settings/#compendium.settings.EnvironsMixin.load_dotenv","text":"Load environs from .env file. Source code in compendium/settings.py 58 59 60 61 62 63 64 65 66 67 @staticmethod def load_dotenv () -> None : '''Load environs from .env file.''' env_file = os . path . join ( os . getcwd (), '.env' ) # if self._check_filepath(env_file): if os . path . exists ( env_file ): with open ( env_file ) as env : for line in env : k , v = line . partition ( '=' )[:: 2 ] os . environ [ k . strip () . upper ()] = str ( v )","title":"load_dotenv()"},{"location":"development/settings/#compendium.settings.EnvironsMixin.load_environs","text":"Load environment variables. Source code in compendium/settings.py 69 70 71 72 73 74 75 76 def load_environs ( self , force : bool = False ) -> Dict [ str , Any ]: '''Load environment variables.''' prefix = str ( f \" { self . prefix } _\" if self . prefix != '' else self . prefix ) env : Dict [ str , Any ] = {} for k , v in os . environ . items (): if k . startswith ( prefix ): env = self . merge ( env , self . to_dict ( k . replace ( prefix , '' ), v ),) return env","title":"load_environs()"},{"location":"development/settings/#compendium.settings.EnvironsMixin.to_dict","text":"Convert environment key to dictionary. Source code in compendium/settings.py 45 46 47 48 49 50 51 52 53 54 55 56 @staticmethod def to_dict ( key : str , value : Any ) -> Dict [ str , Any ]: '''Convert environment key to dictionary.''' def expand ( x ): '''Convert key part to dictionary key.''' if '_' not in x : return { x : value } k , v = x . split ( '_' , 1 ) return { k : expand ( v )} return expand ( key . lower ())","title":"to_dict()"},{"location":"development/settings/#compendium.settings.MergeMixin","text":"Merge dictionaries.","title":"MergeMixin"},{"location":"development/settings/#compendium.settings.MergeMixin.merge","text":"Perform recursive merge. Source code in compendium/settings.py 18 19 20 21 22 23 24 25 26 @classmethod def merge ( self , source , update ): '''Perform recursive merge.''' for k , v in update . items (): if isinstance ( v , Mapping ): source [ k ] = self . merge ( source . get ( k , {}), v ) else : source [ k ] = v return source","title":"merge()"},{"location":"development/settings/#compendium.settings.SettingsMap","text":"Manage settings loaded from confiugrations using dpath.","title":"SettingsMap"},{"location":"development/settings/#compendium.settings.SettingsMap.__init__","text":"Initialize settings store. Source code in compendium/settings.py 82 83 84 85 86 def __init__ ( self , * args , ** kwargs ): '''Initialize settings store.''' if 'separator' in kwargs : self . separator : str = kwargs . pop ( 'separator' ) super () . __init__ ( * args )","title":"__init__()"},{"location":"development/settings/#compendium.settings.SettingsMap.push","text":"Push settings untop store. Source code in compendium/settings.py 88 89 90 91 def push ( self , settings ) -> None : '''Push settings untop store.''' logging . debug ( settings ) self . maps . insert ( 0 , settings )","title":"push()"},{"location":"development/filetypes/json/","text":"Control JSON module. JsonConfig Manage JSON configurations. __init__ ( self , ** kwargs ) special Initialize JSON configuration module. Source code in compendium/filetypes/json.py 20 21 22 23 def __init__ ( self , ** kwargs : Any ) -> None : '''Initialize JSON configuration module.''' logging . info ( 'Inializing JsonConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) dump_config ( self , content , filepath ) Save settings to JSON configuration. Source code in compendium/filetypes/json.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def dump_config ( self , content : Dict [ str , Any ], filepath : str ) -> None : '''Save settings to JSON configuration.''' try : with open ( filepath , 'w' ) as f : json . dump ( content , f , indent = 2 , sort_keys = True # , default=self.encoder ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise filetypes () staticmethod Return support JSON filetypes. Source code in compendium/filetypes/json.py 26 27 28 29 @staticmethod def filetypes () -> Tuple [ str , ... ]: '''Return support JSON filetypes.''' return ( 'json' ,) load_config ( self , filepath ) Load settings from JSON configuration. Source code in compendium/filetypes/json.py 31 32 33 34 35 36 37 38 39 def load_config ( self , filepath : str ) -> Dict [ str , Any ]: '''Load settings from JSON configuration.''' logging . info ( 'loading JSON configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = json . load ( f ) else : content = {} return content","title":"Json"},{"location":"development/filetypes/json/#compendium.filetypes.json","text":"Control JSON module.","title":"compendium.filetypes.json"},{"location":"development/filetypes/json/#compendium.filetypes.json.JsonConfig","text":"Manage JSON configurations.","title":"JsonConfig"},{"location":"development/filetypes/json/#compendium.filetypes.json.JsonConfig.__init__","text":"Initialize JSON configuration module. Source code in compendium/filetypes/json.py 20 21 22 23 def __init__ ( self , ** kwargs : Any ) -> None : '''Initialize JSON configuration module.''' logging . info ( 'Inializing JsonConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' )","title":"__init__()"},{"location":"development/filetypes/json/#compendium.filetypes.json.JsonConfig.dump_config","text":"Save settings to JSON configuration. Source code in compendium/filetypes/json.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 def dump_config ( self , content : Dict [ str , Any ], filepath : str ) -> None : '''Save settings to JSON configuration.''' try : with open ( filepath , 'w' ) as f : json . dump ( content , f , indent = 2 , sort_keys = True # , default=self.encoder ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise","title":"dump_config()"},{"location":"development/filetypes/json/#compendium.filetypes.json.JsonConfig.filetypes","text":"Return support JSON filetypes. Source code in compendium/filetypes/json.py 26 27 28 29 @staticmethod def filetypes () -> Tuple [ str , ... ]: '''Return support JSON filetypes.''' return ( 'json' ,)","title":"filetypes()"},{"location":"development/filetypes/json/#compendium.filetypes.json.JsonConfig.load_config","text":"Load settings from JSON configuration. Source code in compendium/filetypes/json.py 31 32 33 34 35 36 37 38 39 def load_config ( self , filepath : str ) -> Dict [ str , Any ]: '''Load settings from JSON configuration.''' logging . info ( 'loading JSON configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = json . load ( f ) else : content = {} return content","title":"load_config()"},{"location":"development/filetypes/toml/","text":"Control toml module. TomlConfig Manage toml configurations. __init__ ( self , ** kwargs ) special Initialize toml module. Source code in compendium/filetypes/toml.py 19 20 21 22 def __init__ ( self , ** kwargs : Any ) -> None : '''Initialize toml module.''' logging . info ( 'Inializing TomlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) dump_config ( self , content , filepath ) Save settings to toml configuration. Source code in compendium/filetypes/toml.py 69 70 71 72 73 74 75 76 77 78 79 80 def dump_config ( self , content : Dict [ str , Any ], filepath : str ) -> None : '''Save settings to toml configuration.''' logging . info ( 'TomlConfig: saving configuration file' ) try : with open ( filepath , 'w' ) as f : f . write ( tomlkit . dumps ( content )) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise filetypes () staticmethod Return supported filetypes. Source code in compendium/filetypes/toml.py 24 25 26 27 @staticmethod def filetypes () -> Tuple [ str , ... ]: '''Return supported filetypes.''' return ( 'toml' , 'tml' ) load_config ( self , filepath ) Load settings from toml configuration. Source code in compendium/filetypes/toml.py 59 60 61 62 63 64 65 66 67 def load_config ( self , filepath : str ) -> Dict [ str , Any ]: '''Load settings from toml configuration.''' logging . info ( 'loading TOML configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = self . _convert ( tomlkit . parse ( f . read ())) else : content = {} return content","title":"Toml"},{"location":"development/filetypes/toml/#compendium.filetypes.toml","text":"Control toml module.","title":"compendium.filetypes.toml"},{"location":"development/filetypes/toml/#compendium.filetypes.toml.TomlConfig","text":"Manage toml configurations.","title":"TomlConfig"},{"location":"development/filetypes/toml/#compendium.filetypes.toml.TomlConfig.__init__","text":"Initialize toml module. Source code in compendium/filetypes/toml.py 19 20 21 22 def __init__ ( self , ** kwargs : Any ) -> None : '''Initialize toml module.''' logging . info ( 'Inializing TomlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' )","title":"__init__()"},{"location":"development/filetypes/toml/#compendium.filetypes.toml.TomlConfig.dump_config","text":"Save settings to toml configuration. Source code in compendium/filetypes/toml.py 69 70 71 72 73 74 75 76 77 78 79 80 def dump_config ( self , content : Dict [ str , Any ], filepath : str ) -> None : '''Save settings to toml configuration.''' logging . info ( 'TomlConfig: saving configuration file' ) try : with open ( filepath , 'w' ) as f : f . write ( tomlkit . dumps ( content )) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise","title":"dump_config()"},{"location":"development/filetypes/toml/#compendium.filetypes.toml.TomlConfig.filetypes","text":"Return supported filetypes. Source code in compendium/filetypes/toml.py 24 25 26 27 @staticmethod def filetypes () -> Tuple [ str , ... ]: '''Return supported filetypes.''' return ( 'toml' , 'tml' )","title":"filetypes()"},{"location":"development/filetypes/toml/#compendium.filetypes.toml.TomlConfig.load_config","text":"Load settings from toml configuration. Source code in compendium/filetypes/toml.py 59 60 61 62 63 64 65 66 67 def load_config ( self , filepath : str ) -> Dict [ str , Any ]: '''Load settings from toml configuration.''' logging . info ( 'loading TOML configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : content = self . _convert ( tomlkit . parse ( f . read ())) else : content = {} return content","title":"load_config()"},{"location":"development/filetypes/xml/","text":"Control XML module. XmlConfig Manage XML configurations. __init__ ( self , ** kwargs ) special Initialize XML configuration module. Source code in compendium/filetypes/xml.py 19 20 21 22 23 24 25 def __init__ ( self , ** kwargs : Any ) -> None : '''Initialize XML configuration module.''' logging . info ( 'Inializing XmlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . encoder = kwargs . get ( 'encoder' , str ) self . process_namespaces = kwargs . get ( 'process_namespaces' , False ) self . namespaces = kwargs . get ( 'namespaces' , None ) dump_config ( self , content , filepath ) Save settings to XML configuration. Source code in compendium/filetypes/xml.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def dump_config ( self , content : Dict [ str , Any ], filepath : str ) -> None : '''Save settings to XML configuration.''' try : with open ( filepath , 'w' ) as f : f . write ( xmltodict . unparse ( content , encoding = self . encoding , pretty = True ) ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise filetypes () staticmethod Return supported XML configuration filetypes. Source code in compendium/filetypes/xml.py 27 28 29 30 @staticmethod def filetypes () -> Tuple [ str , ... ]: '''Return supported XML configuration filetypes.''' return ( 'xml' ,) load_config ( self , filepath ) Load settings from XML configuration. Source code in compendium/filetypes/xml.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def load_config ( self , filepath : str ) -> Dict [ str , Any ]: '''Load settings from XML configuration.''' logging . info ( 'loading XML configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' ) as f : content = xmltodict . parse ( f . read (), encoding = self . encoding , process_namespaces = self . process_namespaces , namespaces = self . namespaces ) else : content = {} return content","title":"Xml"},{"location":"development/filetypes/xml/#compendium.filetypes.xml","text":"Control XML module.","title":"compendium.filetypes.xml"},{"location":"development/filetypes/xml/#compendium.filetypes.xml.XmlConfig","text":"Manage XML configurations.","title":"XmlConfig"},{"location":"development/filetypes/xml/#compendium.filetypes.xml.XmlConfig.__init__","text":"Initialize XML configuration module. Source code in compendium/filetypes/xml.py 19 20 21 22 23 24 25 def __init__ ( self , ** kwargs : Any ) -> None : '''Initialize XML configuration module.''' logging . info ( 'Inializing XmlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . encoder = kwargs . get ( 'encoder' , str ) self . process_namespaces = kwargs . get ( 'process_namespaces' , False ) self . namespaces = kwargs . get ( 'namespaces' , None )","title":"__init__()"},{"location":"development/filetypes/xml/#compendium.filetypes.xml.XmlConfig.dump_config","text":"Save settings to XML configuration. Source code in compendium/filetypes/xml.py 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 def dump_config ( self , content : Dict [ str , Any ], filepath : str ) -> None : '''Save settings to XML configuration.''' try : with open ( filepath , 'w' ) as f : f . write ( xmltodict . unparse ( content , encoding = self . encoding , pretty = True ) ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise","title":"dump_config()"},{"location":"development/filetypes/xml/#compendium.filetypes.xml.XmlConfig.filetypes","text":"Return supported XML configuration filetypes. Source code in compendium/filetypes/xml.py 27 28 29 30 @staticmethod def filetypes () -> Tuple [ str , ... ]: '''Return supported XML configuration filetypes.''' return ( 'xml' ,)","title":"filetypes()"},{"location":"development/filetypes/xml/#compendium.filetypes.xml.XmlConfig.load_config","text":"Load settings from XML configuration. Source code in compendium/filetypes/xml.py 32 33 34 35 36 37 38 39 40 41 42 43 44 45 def load_config ( self , filepath : str ) -> Dict [ str , Any ]: '''Load settings from XML configuration.''' logging . info ( 'loading XML configuration file' ) if os . path . isfile ( filepath ): with open ( filepath , 'r' ) as f : content = xmltodict . parse ( f . read (), encoding = self . encoding , process_namespaces = self . process_namespaces , namespaces = self . namespaces ) else : content = {} return content","title":"load_config()"},{"location":"development/filetypes/yaml/","text":"Control YAML configuration module. YamlConfig Manage YAML configuration files. __init__ ( self , ** kwargs ) special Initialize YAML configuration module. Source code in compendium/filetypes/yaml.py 26 27 28 29 30 def __init__ ( self , ** kwargs : Any ) -> None : '''Initialize YAML configuration module.''' logging . info ( 'Inializing YamlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . kind = kwargs . get ( 'kind' , None ) dump_config ( self , content , filepath ) Save settings to YAML configuration. Source code in compendium/filetypes/yaml.py 57 58 59 60 61 62 63 64 65 66 67 68 def dump_config ( self , content : Dict [ str , Any ], filepath : str ) -> None : '''Save settings to YAML configuration.''' try : with open ( filepath , 'w' ) as f : yaml = self . __yaml_parser ( self . kind or 'rt' ) yaml . dump ( content , f ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise filetypes () staticmethod Return support YAML filetypes. Source code in compendium/filetypes/yaml.py 39 40 41 42 @staticmethod def filetypes () -> Tuple [ str , ... ]: '''Return support YAML filetypes.''' return ( 'yaml' , 'yml' ) load_config ( self , filepath ) Load settings from YAML configuration. Source code in compendium/filetypes/yaml.py 44 45 46 47 48 49 50 51 52 53 54 55 def load_config ( self , filepath : str ) -> Dict [ str , Any ]: '''Load settings from YAML configuration.''' logging . info ( \"loading YAML configuration file {} \" . format ( filepath ) ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : yaml = self . __yaml_parser ( self . kind or 'safe' ) content = yaml . load ( f ) else : content = {} return content","title":"Yaml"},{"location":"development/filetypes/yaml/#compendium.filetypes.yaml","text":"Control YAML configuration module.","title":"compendium.filetypes.yaml"},{"location":"development/filetypes/yaml/#compendium.filetypes.yaml.YamlConfig","text":"Manage YAML configuration files.","title":"YamlConfig"},{"location":"development/filetypes/yaml/#compendium.filetypes.yaml.YamlConfig.__init__","text":"Initialize YAML configuration module. Source code in compendium/filetypes/yaml.py 26 27 28 29 30 def __init__ ( self , ** kwargs : Any ) -> None : '''Initialize YAML configuration module.''' logging . info ( 'Inializing YamlConfig' ) self . encoding = kwargs . get ( 'encoding' , 'utf-8' ) self . kind = kwargs . get ( 'kind' , None )","title":"__init__()"},{"location":"development/filetypes/yaml/#compendium.filetypes.yaml.YamlConfig.dump_config","text":"Save settings to YAML configuration. Source code in compendium/filetypes/yaml.py 57 58 59 60 61 62 63 64 65 66 67 68 def dump_config ( self , content : Dict [ str , Any ], filepath : str ) -> None : '''Save settings to YAML configuration.''' try : with open ( filepath , 'w' ) as f : yaml = self . __yaml_parser ( self . kind or 'rt' ) yaml . dump ( content , f ) except IOError as err : if err . errno == errno . EACCES : logging . error ( 'You do not have permission to write to this file' ) raise","title":"dump_config()"},{"location":"development/filetypes/yaml/#compendium.filetypes.yaml.YamlConfig.filetypes","text":"Return support YAML filetypes. Source code in compendium/filetypes/yaml.py 39 40 41 42 @staticmethod def filetypes () -> Tuple [ str , ... ]: '''Return support YAML filetypes.''' return ( 'yaml' , 'yml' )","title":"filetypes()"},{"location":"development/filetypes/yaml/#compendium.filetypes.yaml.YamlConfig.load_config","text":"Load settings from YAML configuration. Source code in compendium/filetypes/yaml.py 44 45 46 47 48 49 50 51 52 53 54 55 def load_config ( self , filepath : str ) -> Dict [ str , Any ]: '''Load settings from YAML configuration.''' logging . info ( \"loading YAML configuration file {} \" . format ( filepath ) ) if os . path . isfile ( filepath ): with open ( filepath , 'r' , encoding = self . encoding ) as f : yaml = self . __yaml_parser ( self . kind or 'safe' ) content = yaml . load ( f ) else : content = {} return content","title":"load_config()"}]}